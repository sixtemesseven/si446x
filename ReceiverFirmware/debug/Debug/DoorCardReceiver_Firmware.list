
DoorCardReceiver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003258  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034fc  080034fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034fc  080034fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034fc  080034fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003510  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003510  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b8b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001558  00000000  00000000  00027bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d04e  00000000  00000000  0002a070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000694a  00000000  00000000  000370be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045b3c  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00083544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c10  00000000  00000000  000835c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003300 	.word	0x08003300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003300 	.word	0x08003300

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b099      	sub	sp, #100	; 0x64
 8000224:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd8f 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f875 	bl	8000318 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f931 	bl	8000494 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000232:	f000 f8b9 	bl	80003a8 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000236:	f000 f8f9 	bl	800042c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  si446x rf(&hspi1, GPIOA, nSEL_Pin, GPIOF, SDN_Pin, GPIOA, IRQ_Pin); //446x object
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	019c      	lsls	r4, r3, #6
 800023e:	2390      	movs	r3, #144	; 0x90
 8000240:	05da      	lsls	r2, r3, #23
 8000242:	4930      	ldr	r1, [pc, #192]	; (8000304 <main+0xe4>)
 8000244:	252c      	movs	r5, #44	; 0x2c
 8000246:	1978      	adds	r0, r7, r5
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	9303      	str	r3, [sp, #12]
 800024e:	2390      	movs	r3, #144	; 0x90
 8000250:	05db      	lsls	r3, r3, #23
 8000252:	9302      	str	r3, [sp, #8]
 8000254:	2302      	movs	r3, #2
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <main+0xe8>)
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	0023      	movs	r3, r4
 800025e:	f000 f9d0 	bl	8000602 <_ZN6si446xC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
  rf.powerUp(); //Power up
 8000262:	197b      	adds	r3, r7, r5
 8000264:	0018      	movs	r0, r3
 8000266:	f000 f9f8 	bl	800065a <_ZN6si446x7powerUpEv>
	 		  HAL_Delay(1000);
	 	  }
	 	  */

	 	  //MODEM 2 - RECEIVER
	  	  HAL_GPIO_WritePin(GPIOB, Relay_5_Pin, GPIO_PIN_RESET);
 800026a:	4b28      	ldr	r3, [pc, #160]	; (800030c <main+0xec>)
 800026c:	2200      	movs	r2, #0
 800026e:	2102      	movs	r1, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f001 f83d 	bl	80012f0 <HAL_GPIO_WritePin>
	  	  while (1)
	 		  {
	 			  rf.startRX(1);
 8000276:	252c      	movs	r5, #44	; 0x2c
 8000278:	197b      	adds	r3, r7, r5
 800027a:	2101      	movs	r1, #1
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fb0d 	bl	800089c <_ZN6si446x7startRXEh>
	 			  HAL_Delay(30);
 8000282:	201e      	movs	r0, #30
 8000284:	f000 fdc4 	bl	8000e10 <HAL_Delay>
	 			  uint8_t fifoBytes = rf.getRxFifoInfo();
 8000288:	264f      	movs	r6, #79	; 0x4f
 800028a:	19bc      	adds	r4, r7, r6
 800028c:	197b      	adds	r3, r7, r5
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fb35 	bl	80008fe <_ZN6si446x13getRxFifoInfoEv>
 8000294:	0003      	movs	r3, r0
 8000296:	7023      	strb	r3, [r4, #0]
	 			  uint8_t buf[16] = {};
 8000298:	231c      	movs	r3, #28
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 f823 	bl	80032ee <memset>
	 			  if(fifoBytes > 0)
 80002a8:	19bb      	adds	r3, r7, r6
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0e2      	beq.n	8000276 <main+0x56>
	 			  {
	 				  uint8_t packetReceived[] = "/n Packet Received \n";
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4a17      	ldr	r2, [pc, #92]	; (8000310 <main+0xf0>)
 80002b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b6:	c313      	stmia	r3!, {r0, r1, r4}
 80002b8:	ca03      	ldmia	r2!, {r0, r1}
 80002ba:	c303      	stmia	r3!, {r0, r1}
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	701a      	strb	r2, [r3, #0]
	 				  HAL_UART_Transmit(&huart2, packetReceived, sizeof(packetReceived), 1000);
 80002c0:	23fa      	movs	r3, #250	; 0xfa
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	1d39      	adds	r1, r7, #4
 80002c6:	4813      	ldr	r0, [pc, #76]	; (8000314 <main+0xf4>)
 80002c8:	2215      	movs	r2, #21
 80002ca:	f002 fc3d 	bl	8002b48 <HAL_UART_Transmit>
	 				  rf.getPacket(buf, fifoBytes);
 80002ce:	234f      	movs	r3, #79	; 0x4f
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	231c      	movs	r3, #28
 80002d6:	18f9      	adds	r1, r7, r3
 80002d8:	232c      	movs	r3, #44	; 0x2c
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fb43 	bl	8000968 <_ZN6si446x9getPacketEPhh>
	 				  //HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
	 				  //break;
	 				  //if(buf == answer){break;};
	 				  HAL_GPIO_WritePin(GPIOB, Relay_5_Pin, GPIO_PIN_SET);
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <main+0xec>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	2102      	movs	r1, #2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f801 	bl	80012f0 <HAL_GPIO_WritePin>
	 				  HAL_Delay(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f000 fd8e 	bl	8000e10 <HAL_Delay>
	 				  HAL_GPIO_WritePin(GPIOB, Relay_5_Pin, GPIO_PIN_RESET);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <main+0xec>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fff8 	bl	80012f0 <HAL_GPIO_WritePin>
	 			  }
	 		  }
 8000300:	e7b9      	b.n	8000276 <main+0x56>
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	20000028 	.word	0x20000028
 8000308:	48001400 	.word	0x48001400
 800030c:	48000400 	.word	0x48000400
 8000310:	08003318 	.word	0x08003318
 8000314:	2000008c 	.word	0x2000008c

08000318 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b091      	sub	sp, #68	; 0x44
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	2410      	movs	r4, #16
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	2330      	movs	r3, #48	; 0x30
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f002 ffe0 	bl	80032ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	2310      	movs	r3, #16
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f002 ffd9 	bl	80032ee <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033c:	0021      	movs	r1, r4
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2202      	movs	r2, #2
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2210      	movs	r2, #16
 800034e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	187b      	adds	r3, r7, r1
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f80d 	bl	8001378 <HAL_RCC_OscConfig>
 800035e:	0003      	movs	r3, r0
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	4193      	sbcs	r3, r2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 800036a:	f000 f945 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	003b      	movs	r3, r7
 8000370:	2207      	movs	r2, #7
 8000372:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	003b      	movs	r3, r7
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	003b      	movs	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000386:	003b      	movs	r3, r7
 8000388:	2100      	movs	r1, #0
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fb12 	bl	80019b4 <HAL_RCC_ClockConfig>
 8000390:	0003      	movs	r3, r0
 8000392:	1e5a      	subs	r2, r3, #1
 8000394:	4193      	sbcs	r3, r2
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800039c:	f000 f92c 	bl	80005f8 <Error_Handler>
  }
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b011      	add	sp, #68	; 0x44
 80003a6:	bd90      	pop	{r4, r7, pc}

080003a8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003ae:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <_ZL12MX_SPI1_Initv+0x80>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003b4:	2282      	movs	r2, #130	; 0x82
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003c2:	22e0      	movs	r2, #224	; 0xe0
 80003c4:	00d2      	lsls	r2, r2, #3
 80003c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003d6:	2280      	movs	r2, #128	; 0x80
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 8000402:	2208      	movs	r2, #8
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <_ZL12MX_SPI1_Initv+0x7c>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fc27 	bl	8001c5c <HAL_SPI_Init>
 800040e:	0003      	movs	r3, r0
 8000410:	1e5a      	subs	r2, r3, #1
 8000412:	4193      	sbcs	r3, r2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 800041a:	f000 f8ed 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000028 	.word	0x20000028
 8000428:	40013000 	.word	0x40013000

0800042c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000438:	2296      	movs	r2, #150	; 0x96
 800043a:	0212      	lsls	r2, r2, #8
 800043c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000470:	0018      	movs	r0, r3
 8000472:	f002 fb15 	bl	8002aa0 <HAL_UART_Init>
 8000476:	0003      	movs	r3, r0
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	4193      	sbcs	r3, r2
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000482:	f000 f8b9 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000008c 	.word	0x2000008c
 8000490:	40004400 	.word	0x40004400

08000494 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	240c      	movs	r4, #12
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 ff22 	bl	80032ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004aa:	4b4e      	ldr	r3, [pc, #312]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b4d      	ldr	r3, [pc, #308]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	03c9      	lsls	r1, r1, #15
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b4a      	ldr	r3, [pc, #296]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	03db      	lsls	r3, r3, #15
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b46      	ldr	r3, [pc, #280]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0289      	lsls	r1, r1, #10
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b43      	ldr	r3, [pc, #268]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	029b      	lsls	r3, r3, #10
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	02c9      	lsls	r1, r1, #11
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <_ZL12MX_GPIO_Initv+0x150>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	02db      	lsls	r3, r3, #11
 80004f8:	4013      	ands	r3, r2
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_5_GPIO_Port, Relay_5_Pin, GPIO_PIN_SET);
 80004fe:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <_ZL12MX_GPIO_Initv+0x154>)
 8000500:	2201      	movs	r2, #1
 8000502:	2102      	movs	r1, #2
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fef3 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_3_Pin|nSEL_Pin, GPIO_PIN_RESET);
 800050a:	2388      	movs	r3, #136	; 0x88
 800050c:	0199      	lsls	r1, r3, #6
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	2200      	movs	r2, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f000 feeb 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin SDN_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SDN_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2203      	movs	r2, #3
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	4a32      	ldr	r2, [pc, #200]	; (80005ec <_ZL12MX_GPIO_Initv+0x158>)
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2202      	movs	r2, #2
 800052a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800052c:	193b      	adds	r3, r7, r4
 800052e:	4a30      	ldr	r2, [pc, #192]	; (80005f0 <_ZL12MX_GPIO_Initv+0x15c>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f000 fd6c 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2202      	movs	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2202      	movs	r2, #2
 8000548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800054a:	193a      	adds	r2, r7, r4
 800054c:	2390      	movs	r3, #144	; 0x90
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd5c 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_2_Pin IRQ_Pin Relay_4_Pin */
  GPIO_InitStruct.Pin = Relay_2_Pin|IRQ_Pin|Relay_4_Pin;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <_ZL12MX_GPIO_Initv+0x160>)
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	193a      	adds	r2, r7, r4
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fd4c 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_5_Pin */
  GPIO_InitStruct.Pin = Relay_5_Pin;
 8000578:	0021      	movs	r1, r4
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2202      	movs	r2, #2
 800057e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2201      	movs	r2, #1
 8000584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Relay_5_GPIO_Port, &GPIO_InitStruct);
 8000592:	000c      	movs	r4, r1
 8000594:	187b      	adds	r3, r7, r1
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_ZL12MX_GPIO_Initv+0x154>)
 8000598:	0019      	movs	r1, r3
 800059a:	0010      	movs	r0, r2
 800059c:	f000 fd38 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_3_Pin nSEL_Pin */
  GPIO_InitStruct.Pin = Relay_3_Pin|nSEL_Pin;
 80005a0:	0021      	movs	r1, r4
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2288      	movs	r2, #136	; 0x88
 80005a6:	0192      	lsls	r2, r2, #6
 80005a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fd23 	bl	8001010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2005      	movs	r0, #5
 80005d0:	f000 fcec 	bl	8000fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005d4:	2005      	movs	r0, #5
 80005d6:	f000 fcfe 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b009      	add	sp, #36	; 0x24
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	10110000 	.word	0x10110000
 80005f0:	48001400 	.word	0x48001400
 80005f4:	00004410 	.word	0x00004410

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <_ZN6si446xC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
	SDN = sdn;
	IRQ = irq;
}

//Constructor without gpib pins and with seperate banks for each pin
si446x::si446x(SPI_HandleTypeDef* spi, GPIO_TypeDef* pinBankSS, uint16_t ss,
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	001a      	movs	r2, r3
 8000610:	1cbb      	adds	r3, r7, #2
 8000612:	801a      	strh	r2, [r3, #0]
		GPIO_TypeDef* pinBankSDN, uint16_t sdn, GPIO_TypeDef* pinBankIRQ, uint16_t irq) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	22fa      	movs	r2, #250	; 0xfa
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	839a      	strh	r2, [r3, #28]
	SPI = spi;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	PIN_BANK_SS = pinBankSS;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	619a      	str	r2, [r3, #24]
	SS = ss;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	1cba      	adds	r2, r7, #2
 800062c:	8812      	ldrh	r2, [r2, #0]
 800062e:	801a      	strh	r2, [r3, #0]
	PIN_BANK_SDN = pinBankSDN;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	69ba      	ldr	r2, [r7, #24]
 8000634:	615a      	str	r2, [r3, #20]
	SDN = sdn;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	221c      	movs	r2, #28
 800063a:	18ba      	adds	r2, r7, r2
 800063c:	8812      	ldrh	r2, [r2, #0]
 800063e:	805a      	strh	r2, [r3, #2]
	PIN_BANK_IRQ = pinBankIRQ;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6a3a      	ldr	r2, [r7, #32]
 8000644:	611a      	str	r2, [r3, #16]
	IRQ = irq;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2224      	movs	r2, #36	; 0x24
 800064a:	18ba      	adds	r2, r7, r2
 800064c:	8812      	ldrh	r2, [r2, #0]
 800064e:	809a      	strh	r2, [r3, #4]
}
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	0018      	movs	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}

0800065a <_ZN6si446x7powerUpEv>:
	HAL_Delay(500); //TODO Use nIRQ / GPIO Pin
}


//Power up and program MCU
void si446x::powerUp() {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PIN_BANK_SDN, SDN, GPIO_PIN_SET);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6958      	ldr	r0, [r3, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	885b      	ldrh	r3, [r3, #2]
 800066a:	2201      	movs	r2, #1
 800066c:	0019      	movs	r1, r3
 800066e:	f000 fe3f 	bl	80012f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 fbcc 	bl	8000e10 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_BANK_SDN, SDN, GPIO_PIN_RESET);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6958      	ldr	r0, [r3, #20]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	885b      	ldrh	r3, [r3, #2]
 8000680:	2200      	movs	r2, #0
 8000682:	0019      	movs	r1, r3
 8000684:	f000 fe34 	bl	80012f0 <HAL_GPIO_WritePin>
	waitUntilReady();
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f808 	bl	80006a0 <_ZN6si446x14waitUntilReadyEv>
	writeConfig();
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f99a 	bl	80009cc <_ZN6si446x11writeConfigEv>
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_ZN6si446x14waitUntilReadyEv>:

//Before every command check if CTS is asserted
void si446x::waitUntilReady() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uint8_t comand = CTS;
 80006a8:	230f      	movs	r3, #15
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	2244      	movs	r2, #68	; 0x44
 80006ae:	701a      	strb	r2, [r3, #0]
	uint8_t testByte = 0x00;
 80006b0:	230e      	movs	r3, #14
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	while (testByte != 0xff) {
 80006b8:	230e      	movs	r3, #14
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d022      	beq.n	8000708 <_ZN6si446x14waitUntilReadyEv+0x68>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6998      	ldr	r0, [r3, #24]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	0019      	movs	r1, r3
 80006ce:	f000 fe0f 	bl	80012f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(SPI, &comand, 1, spiTimeout);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68d8      	ldr	r0, [r3, #12]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	8b9b      	ldrh	r3, [r3, #28]
 80006da:	220f      	movs	r2, #15
 80006dc:	18b9      	adds	r1, r7, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	f001 fb56 	bl	8001d90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, &testByte, 1, spiTimeout);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68d8      	ldr	r0, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8b9b      	ldrh	r3, [r3, #28]
 80006ec:	220e      	movs	r2, #14
 80006ee:	18b9      	adds	r1, r7, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	f001 fccf 	bl	8002094 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6998      	ldr	r0, [r3, #24]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2201      	movs	r2, #1
 8000700:	0019      	movs	r1, r3
 8000702:	f000 fdf5 	bl	80012f0 <HAL_GPIO_WritePin>
	while (testByte != 0xff) {
 8000706:	e7d7      	b.n	80006b8 <_ZN6si446x14waitUntilReadyEv+0x18>
	}
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b004      	add	sp, #16
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN6si446x11sendCommandEPhh>:

//Send command and configuration bytes
void si446x::sendCommand(uint8_t* command, uint8_t lenCommand)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	701a      	strb	r2, [r3, #0]
	waitUntilReady();
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ffbd 	bl	80006a0 <_ZN6si446x14waitUntilReadyEv>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6998      	ldr	r0, [r3, #24]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	2200      	movs	r2, #0
 8000730:	0019      	movs	r1, r3
 8000732:	f000 fddd 	bl	80012f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, command, lenCommand, spiTimeout);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	68d8      	ldr	r0, [r3, #12]
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29a      	uxth	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	8b9b      	ldrh	r3, [r3, #28]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	f001 fb23 	bl	8001d90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6998      	ldr	r0, [r3, #24]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2201      	movs	r2, #1
 8000754:	0019      	movs	r1, r3
 8000756:	f000 fdcb 	bl	80012f0 <HAL_GPIO_WritePin>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b004      	add	sp, #16
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN6si446x21sendComandGetResponseEPhhS0_h>:

//Send a command and config bytes, get replay stream in return
void si446x::sendComandGetResponse(uint8_t* command, uint8_t lenCommand, uint8_t* response, uint8_t lenResponse)
{
 8000762:	b590      	push	{r4, r7, lr}
 8000764:	b087      	sub	sp, #28
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	701a      	strb	r2, [r3, #0]
	uint8_t cts[] = {CTS};
 8000772:	2314      	movs	r3, #20
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	2244      	movs	r2, #68	; 0x44
 8000778:	701a      	strb	r2, [r3, #0]
	uint8_t ff[] = {0x00};
 800077a:	2310      	movs	r3, #16
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6998      	ldr	r0, [r3, #24]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	0019      	movs	r1, r3
 800078e:	f000 fdaf 	bl	80012f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, command, lenCommand, spiTimeout);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	68d8      	ldr	r0, [r3, #12]
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b29a      	uxth	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	8b9b      	ldrh	r3, [r3, #28]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	f001 faf5 	bl	8001d90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6998      	ldr	r0, [r3, #24]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2201      	movs	r2, #1
 80007b0:	0019      	movs	r1, r3
 80007b2:	f000 fd9d 	bl	80012f0 <HAL_GPIO_WritePin>
	while(true)
	{
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6998      	ldr	r0, [r3, #24]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2200      	movs	r2, #0
 80007c0:	0019      	movs	r1, r3
 80007c2:	f000 fd95 	bl	80012f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(SPI, cts, 1, spiTimeout);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68d8      	ldr	r0, [r3, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	8b9b      	ldrh	r3, [r3, #28]
 80007ce:	2214      	movs	r2, #20
 80007d0:	18b9      	adds	r1, r7, r2
 80007d2:	2201      	movs	r2, #1
 80007d4:	f001 fadc 	bl	8001d90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, ff, 1, spiTimeout);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	68d8      	ldr	r0, [r3, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	8b9b      	ldrh	r3, [r3, #28]
 80007e0:	2410      	movs	r4, #16
 80007e2:	1939      	adds	r1, r7, r4
 80007e4:	2201      	movs	r2, #1
 80007e6:	f001 fc55 	bl	8002094 <HAL_SPI_Receive>
		if(ff[0] == 0xff)
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	d116      	bne.n	8000820 <_ZN6si446x21sendComandGetResponseEPhhS0_h+0xbe>
		{
			HAL_SPI_Receive(SPI, response, lenResponse, spiTimeout);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	68d8      	ldr	r0, [r3, #12]
 80007f6:	2320      	movs	r3, #32
 80007f8:	2208      	movs	r2, #8
 80007fa:	4694      	mov	ip, r2
 80007fc:	44bc      	add	ip, r7
 80007fe:	4463      	add	r3, ip
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	8b9b      	ldrh	r3, [r3, #28]
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	f001 fc43 	bl	8002094 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6998      	ldr	r0, [r3, #24]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	2201      	movs	r2, #1
 8000818:	0019      	movs	r1, r3
 800081a:	f000 fd69 	bl	80012f0 <HAL_GPIO_WritePin>
			break;
 800081e:	e008      	b.n	8000832 <_ZN6si446x21sendComandGetResponseEPhhS0_h+0xd0>
		}
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6998      	ldr	r0, [r3, #24]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2201      	movs	r2, #1
 800082a:	0019      	movs	r1, r3
 800082c:	f000 fd60 	bl	80012f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 8000830:	e7c1      	b.n	80007b6 <_ZN6si446x21sendComandGetResponseEPhhS0_h+0x54>
	}
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b007      	add	sp, #28
 8000838:	bd90      	pop	{r4, r7, pc}

0800083a <_ZN6si446x14clearInteruptsEv>:
	HAL_SPI_Transmit(SPI, data, len, spiTimeout);
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
}

//Clear all pending interupts
void si446x::clearInterupts() {
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = {GET_INT_STATUS, 0x00, 0x00, 0x00};
 8000842:	210c      	movs	r1, #12
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2220      	movs	r2, #32
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	709a      	strb	r2, [r3, #2]
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	70da      	strb	r2, [r3, #3]
	sendCommand(comBuf, 4);
 800085c:	1879      	adds	r1, r7, r1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2204      	movs	r2, #4
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff ff54 	bl	8000710 <_ZN6si446x11sendCommandEPhh>
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b004      	add	sp, #16
 800086e:	bd80      	pop	{r7, pc}

08000870 <_ZN6si446x13setReadyStateEv>:
	return 0xff;
}

//Will bring modem to ready state
void si446x::setReadyState()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = {CHANGE_STATE, 0x03};
 8000878:	210c      	movs	r1, #12
 800087a:	187b      	adds	r3, r7, r1
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <_ZN6si446x13setReadyStateEv+0x28>)
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	801a      	strh	r2, [r3, #0]
	sendCommand(comBuf, 2);
 8000882:	1879      	adds	r1, r7, r1
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2202      	movs	r2, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff41 	bl	8000710 <_ZN6si446x11sendCommandEPhh>
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b004      	add	sp, #16
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	08003330 	.word	0x08003330

0800089c <_ZN6si446x7startRXEh>:

//Inits. RX Mode. When one package is received, modem will fall back to ready mode
void si446x::startRX(uint8_t channel)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	000a      	movs	r2, r1
 80008a6:	1cfb      	adds	r3, r7, #3
 80008a8:	701a      	strb	r2, [r3, #0]
	//Ready State
	setReadyState();
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ffdf 	bl	8000870 <_ZN6si446x13setReadyStateEv>
	//Clear Interupts
	clearInterupts();
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff ffc0 	bl	800083a <_ZN6si446x14clearInteruptsEv>
	//Clear FIFO TX /RX
	clearFifoTXRX();
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 f83d 	bl	800093c <_ZN6si446x13clearFifoTXRXEv>
	//Get Radio into RX Mode
	uint8_t commandRx[] = {START_RX, channel, 0x00, 0x00, 0x00, 0x00,0x03,0x00};
 80008c2:	2108      	movs	r1, #8
 80008c4:	000c      	movs	r4, r1
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	0018      	movs	r0, r3
 80008ca:	2308      	movs	r3, #8
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 fd0d 	bl	80032ee <memset>
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2232      	movs	r2, #50	; 0x32
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2203      	movs	r2, #3
 80008e0:	719a      	strb	r2, [r3, #6]
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	1cfa      	adds	r2, r7, #3
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	705a      	strb	r2, [r3, #1]
	sendCommand(commandRx, sizeof(commandRx));
 80008ea:	1879      	adds	r1, r7, r1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2208      	movs	r2, #8
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff0d 	bl	8000710 <_ZN6si446x11sendCommandEPhh>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b005      	add	sp, #20
 80008fc:	bd90      	pop	{r4, r7, pc}

080008fe <_ZN6si446x13getRxFifoInfoEv>:

//Returns number of Bytes in RX FIFO
uint8_t si446x::getRxFifoInfo()
{
 80008fe:	b590      	push	{r4, r7, lr}
 8000900:	b087      	sub	sp, #28
 8000902:	af02      	add	r7, sp, #8
 8000904:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[2] = {0x15, 0x00};
 8000906:	210c      	movs	r1, #12
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2215      	movs	r2, #21
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	705a      	strb	r2, [r3, #1]
	uint8_t response[2] = {0x00};
 8000914:	2408      	movs	r4, #8
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2200      	movs	r2, #0
 800091a:	801a      	strh	r2, [r3, #0]
	sendComandGetResponse(comBuf, 2, response, 2);
 800091c:	193a      	adds	r2, r7, r4
 800091e:	1879      	adds	r1, r7, r1
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	2302      	movs	r3, #2
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	0013      	movs	r3, r2
 8000928:	2202      	movs	r2, #2
 800092a:	f7ff ff1a 	bl	8000762 <_ZN6si446x21sendComandGetResponseEPhhS0_h>
	return(response[0]);
 800092e:	193b      	adds	r3, r7, r4
 8000930:	781b      	ldrb	r3, [r3, #0]
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b005      	add	sp, #20
 8000938:	bd90      	pop	{r4, r7, pc}
	...

0800093c <_ZN6si446x13clearFifoTXRXEv>:

//Clear RX and TX FIFO
void si446x::clearFifoTXRX() {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = { FIFO_INFO, 0x03};
 8000944:	210c      	movs	r1, #12
 8000946:	187b      	adds	r3, r7, r1
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <_ZN6si446x13clearFifoTXRXEv+0x28>)
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	801a      	strh	r2, [r3, #0]
	sendCommand(comBuf, sizeof(comBuf));
 800094e:	1879      	adds	r1, r7, r1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fedb 	bl	8000710 <_ZN6si446x11sendCommandEPhh>
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	08003334 	.word	0x08003334

08000968 <_ZN6si446x9getPacketEPhh>:

//Gets Packet out of FIFO
void si446x::getPacket(uint8_t* rxData, uint8_t len)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
	uint8_t buf = READ_RX_FIFO;
 8000976:	2417      	movs	r4, #23
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2277      	movs	r2, #119	; 0x77
 800097c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6998      	ldr	r0, [r3, #24]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	0019      	movs	r1, r3
 800098a:	f000 fcb1 	bl	80012f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, &buf, 1, spiTimeout);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	68d8      	ldr	r0, [r3, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	8b9b      	ldrh	r3, [r3, #28]
 8000996:	1939      	adds	r1, r7, r4
 8000998:	2201      	movs	r2, #1
 800099a:	f001 f9f9 	bl	8001d90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxData, len, spiTimeout);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	68d8      	ldr	r0, [r3, #12]
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	8b9b      	ldrh	r3, [r3, #28]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	f001 fb71 	bl	8002094 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6998      	ldr	r0, [r3, #24]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	2201      	movs	r2, #1
 80009bc:	0019      	movs	r1, r3
 80009be:	f000 fc97 	bl	80012f0 <HAL_GPIO_WritePin>
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b007      	add	sp, #28
 80009c8:	bd90      	pop	{r4, r7, pc}
	...

080009cc <_ZN6si446x11writeConfigEv>:


//Writes the configs from the radio_config_Si4463.h to the radio
//TODO include patch?
void si446x::writeConfig() {
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	4c45      	ldr	r4, [pc, #276]	; (8000ae4 <_ZN6si446x11writeConfigEv+0x118>)
 80009d0:	44a5      	add	sp, r4
 80009d2:	af02      	add	r7, sp, #8
 80009d4:	6078      	str	r0, [r7, #4]
	uint8_t buf[1]= {0x00};
 80009d6:	2386      	movs	r3, #134	; 0x86
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	uint8_t configArray[] = RADIO_CONFIGURATION_DATA_ARRAY;
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <_ZN6si446x11writeConfigEv+0x11c>)
 80009e2:	228a      	movs	r2, #138	; 0x8a
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	18ba      	adds	r2, r7, r2
 80009e8:	18d2      	adds	r2, r2, r3
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <_ZN6si446x11writeConfigEv+0x120>)
 80009ec:	0010      	movs	r0, r2
 80009ee:	0019      	movs	r1, r3
 80009f0:	238a      	movs	r3, #138	; 0x8a
 80009f2:	33ff      	adds	r3, #255	; 0xff
 80009f4:	001a      	movs	r2, r3
 80009f6:	f002 fc71 	bl	80032dc <memcpy>
	uint8_t len = configArray[0];
 80009fa:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <_ZN6si446x11writeConfigEv+0x124>)
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	4a3a      	ldr	r2, [pc, #232]	; (8000ae8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000a00:	218a      	movs	r1, #138	; 0x8a
 8000a02:	0089      	lsls	r1, r1, #2
 8000a04:	468c      	mov	ip, r1
 8000a06:	44bc      	add	ip, r7
 8000a08:	4462      	add	r2, ip
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	701a      	strb	r2, [r3, #0]
	int arrCounter = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2288      	movs	r2, #136	; 0x88
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	18ba      	adds	r2, r7, r2
 8000a16:	6013      	str	r3, [r2, #0]
	uint8_t configBuffer[128] = { 0x00 };
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <_ZN6si446x11writeConfigEv+0x128>)
 8000a1a:	228a      	movs	r2, #138	; 0x8a
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4694      	mov	ip, r2
 8000a20:	44bc      	add	ip, r7
 8000a22:	4463      	add	r3, ip
 8000a24:	0018      	movs	r0, r3
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f002 fc5f 	bl	80032ee <memset>
	while (len != 0) {
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <_ZN6si446x11writeConfigEv+0x124>)
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d04e      	beq.n	8000ad8 <_ZN6si446x11writeConfigEv+0x10c>
		for (int i = 0; i < len; i++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2287      	movs	r2, #135	; 0x87
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	18ba      	adds	r2, r7, r2
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <_ZN6si446x11writeConfigEv+0x124>)
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2287      	movs	r2, #135	; 0x87
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	18ba      	adds	r2, r7, r2
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	da1f      	bge.n	8000a96 <_ZN6si446x11writeConfigEv+0xca>
			configBuffer[i] = configArray[arrCounter];
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000a58:	248a      	movs	r4, #138	; 0x8a
 8000a5a:	00a4      	lsls	r4, r4, #2
 8000a5c:	193a      	adds	r2, r7, r4
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	2088      	movs	r0, #136	; 0x88
 8000a62:	0080      	lsls	r0, r0, #2
 8000a64:	183b      	adds	r3, r7, r0
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	7819      	ldrb	r1, [r3, #0]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <_ZN6si446x11writeConfigEv+0x128>)
 8000a6e:	193a      	adds	r2, r7, r4
 8000a70:	18d2      	adds	r2, r2, r3
 8000a72:	2487      	movs	r4, #135	; 0x87
 8000a74:	00a4      	lsls	r4, r4, #2
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	1c0a      	adds	r2, r1, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			arrCounter++;
 8000a80:	183b      	adds	r3, r7, r0
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	183a      	adds	r2, r7, r0
 8000a88:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < len; i++) {
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	193a      	adds	r2, r7, r4
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e7d6      	b.n	8000a44 <_ZN6si446x11writeConfigEv+0x78>
		}
		sendComandGetResponse(configBuffer, len, buf, 0);
 8000a96:	2386      	movs	r3, #134	; 0x86
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	18fc      	adds	r4, r7, r3
 8000a9c:	4d14      	ldr	r5, [pc, #80]	; (8000af0 <_ZN6si446x11writeConfigEv+0x124>)
 8000a9e:	197b      	adds	r3, r7, r5
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	18f9      	adds	r1, r7, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	0023      	movs	r3, r4
 8000aae:	f7ff fe58 	bl	8000762 <_ZN6si446x21sendComandGetResponseEPhhS0_h>
		//printHexArray(configBuffer, len); //DEBUG OUTPUT
		len = configArray[arrCounter];
 8000ab2:	197b      	adds	r3, r7, r5
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000ab6:	218a      	movs	r1, #138	; 0x8a
 8000ab8:	0089      	lsls	r1, r1, #2
 8000aba:	1879      	adds	r1, r7, r1
 8000abc:	1889      	adds	r1, r1, r2
 8000abe:	2088      	movs	r0, #136	; 0x88
 8000ac0:	0080      	lsls	r0, r0, #2
 8000ac2:	183a      	adds	r2, r7, r0
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	188a      	adds	r2, r1, r2
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	701a      	strb	r2, [r3, #0]
		arrCounter++;
 8000acc:	183b      	adds	r3, r7, r0
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	183a      	adds	r2, r7, r0
 8000ad4:	6013      	str	r3, [r2, #0]
	while (len != 0) {
 8000ad6:	e7ab      	b.n	8000a30 <_ZN6si446x11writeConfigEv+0x64>
	}
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	238a      	movs	r3, #138	; 0x8a
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	449d      	add	sp, r3
 8000ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae4:	fffffdd0 	.word	0xfffffdd0
 8000ae8:	fffffe64 	.word	0xfffffe64
 8000aec:	08003338 	.word	0x08003338
 8000af0:	00000227 	.word	0x00000227
 8000af4:	fffffde4 	.word	0xfffffde4

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0549      	lsls	r1, r1, #21
 8000b20:	430a      	orrs	r2, r1
 8000b22:	61da      	str	r2, [r3, #28]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_MspInit+0x44>)
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	055b      	lsls	r3, r3, #21
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2314      	movs	r3, #20
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fbcb 	bl	80032ee <memset>
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_SPI_MspInit+0x90>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d132      	bne.n	8000bc8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0149      	lsls	r1, r1, #5
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	619a      	str	r2, [r3, #24]
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0289      	lsls	r1, r1, #10
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x94>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	029b      	lsls	r3, r3, #10
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	2114      	movs	r1, #20
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	22e0      	movs	r2, #224	; 0xe0
 8000ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	2390      	movs	r3, #144	; 0x90
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 fa24 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b00a      	add	sp, #40	; 0x28
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	2314      	movs	r3, #20
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f002 fb7f 	bl	80032ee <memset>
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x90>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d132      	bne.n	8000c60 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000bfc:	69da      	ldr	r2, [r3, #28]
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	430a      	orrs	r2, r1
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000c0a:	69da      	ldr	r2, [r3, #28]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0289      	lsls	r1, r1, #10
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x94>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	2114      	movs	r1, #20
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	2390      	movs	r3, #144	; 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 f9d8 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b00a      	add	sp, #40	; 0x28
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f89e 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fb40 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 fb3d 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000cc8:	4813      	ldr	r0, [pc, #76]	; (8000d18 <LoopForever+0x6>)
    LDR R1, [R0]
 8000cca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ccc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <LoopForever+0xa>)
    CMP R1, R2
 8000cd0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000cd2:	d105      	bne.n	8000ce0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <LoopForever+0x12>)
    STR R1, [R0]
 8000cd8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000cdc:	4913      	ldr	r1, [pc, #76]	; (8000d2c <LoopForever+0x1a>)
    STR R1, [R0]
 8000cde:	6001      	str	r1, [r0, #0]

08000ce0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ce2:	4914      	ldr	r1, [pc, #80]	; (8000d34 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <LoopForever+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000cf8:	4c11      	ldr	r4, [pc, #68]	; (8000d40 <LoopForever+0x2e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f002 fac3 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fa87 	bl	8000220 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000d18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000d20:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000d24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d2c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d38:	08003504 	.word	0x08003504
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d40:	20000110 	.word	0x20000110

08000d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_IRQHandler>
	...

08000d48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_Init+0x24>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_Init+0x24>)
 8000d52:	2110      	movs	r1, #16
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f809 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5e:	f7ff fecb 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_InitTick+0x5c>)
 8000d7a:	681c      	ldr	r4, [r3, #0]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	23fa      	movs	r3, #250	; 0xfa
 8000d84:	0098      	lsls	r0, r3, #2
 8000d86:	f7ff f9bf 	bl	8000108 <__udivsi3>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f7ff f9ba 	bl	8000108 <__udivsi3>
 8000d94:	0003      	movs	r3, r0
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f92d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e00f      	b.n	8000dc4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d80b      	bhi.n	8000dc2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	2301      	movs	r3, #1
 8000dae:	425b      	negs	r3, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 f8fa 	bl	8000fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_InitTick+0x64>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b003      	add	sp, #12
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	001a      	movs	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	18d2      	adds	r2, r2, r3
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	601a      	str	r2, [r3, #0]
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000010c 	.word	0x2000010c

08000dfc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	2000010c 	.word	0x2000010c

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_Delay+0x40>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	001a      	movs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	189b      	adds	r3, r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b7f      	cmp	r3, #127	; 0x7f
 8000e66:	d809      	bhi.n	8000e7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	231f      	movs	r3, #31
 8000e70:	401a      	ands	r2, r3
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_EnableIRQ+0x30>)
 8000e74:	2101      	movs	r1, #1
 8000e76:	4091      	lsls	r1, r2
 8000e78:	000a      	movs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
  }
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	0002      	movs	r2, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9c:	d828      	bhi.n	8000ef0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <__NVIC_SetPriority+0xd4>)
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	33c0      	adds	r3, #192	; 0xc0
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	589b      	ldr	r3, [r3, r2]
 8000eae:	1dfa      	adds	r2, r7, #7
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	00d2      	lsls	r2, r2, #3
 8000eba:	21ff      	movs	r1, #255	; 0xff
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	401a      	ands	r2, r3
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4003      	ands	r3, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	481f      	ldr	r0, [pc, #124]	; (8000f5c <__NVIC_SetPriority+0xd4>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	33c0      	adds	r3, #192	; 0xc0
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eee:	e031      	b.n	8000f54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <__NVIC_SetPriority+0xd8>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	230f      	movs	r3, #15
 8000efa:	400b      	ands	r3, r1
 8000efc:	3b08      	subs	r3, #8
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3306      	adds	r3, #6
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	3304      	adds	r3, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1dfa      	adds	r2, r7, #7
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	0011      	movs	r1, r2
 8000f10:	2203      	movs	r2, #3
 8000f12:	400a      	ands	r2, r1
 8000f14:	00d2      	lsls	r2, r2, #3
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	43d2      	mvns	r2, r2
 8000f1e:	401a      	ands	r2, r3
 8000f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	22ff      	movs	r2, #255	; 0xff
 8000f28:	401a      	ands	r2, r3
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2303      	movs	r3, #3
 8000f32:	4003      	ands	r3, r0
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <__NVIC_SetPriority+0xd8>)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	001c      	movs	r4, r3
 8000f40:	230f      	movs	r3, #15
 8000f42:	4023      	ands	r3, r4
 8000f44:	3b08      	subs	r3, #8
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	18c3      	adds	r3, r0, r3
 8000f50:	3304      	adds	r3, #4
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <SysTick_Config+0x40>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e010      	b.n	8000f9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <SysTick_Config+0x44>)
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	2301      	movs	r3, #1
 8000f84:	425b      	negs	r3, r3
 8000f86:	2103      	movs	r1, #3
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff7d 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SysTick_Config+0x44>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x44>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	00ffffff 	.word	0x00ffffff
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	1c02      	adds	r2, r0, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	0002      	movs	r2, r0
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff33 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ffaf 	bl	8000f64 <SysTick_Config>
 8001006:	0003      	movs	r3, r0
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e14f      	b.n	80012c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d100      	bne.n	8001038 <HAL_GPIO_Init+0x28>
 8001036:	e140      	b.n	80012ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x38>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	58d3      	ldr	r3, [r2, r3]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2207      	movs	r2, #7
 800105a:	4013      	ands	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2107      	movs	r1, #7
 8001074:	400b      	ands	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <HAL_GPIO_Init+0xd4>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	055b      	lsls	r3, r3, #21
 800117e:	4013      	ands	r3, r2
 8001180:	d100      	bne.n	8001184 <HAL_GPIO_Init+0x174>
 8001182:	e09a      	b.n	80012ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	619a      	str	r2, [r3, #24]
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2201      	movs	r2, #1
 8001196:	4013      	ands	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	589b      	ldr	r3, [r3, r2]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2203      	movs	r2, #3
 80011ae:	4013      	ands	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	409a      	lsls	r2, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	2390      	movs	r3, #144	; 0x90
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x1de>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_GPIO_Init+0x2d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x1da>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a42      	ldr	r2, [pc, #264]	; (80012e8 <HAL_GPIO_Init+0x2d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x1d6>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011f2:	2300      	movs	r3, #0
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	2103      	movs	r1, #3
 80011f8:	400a      	ands	r2, r1
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	4013      	ands	r3, r2
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	4013      	ands	r3, r2
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43da      	mvns	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	039b      	lsls	r3, r3, #14
 80012a8:	4013      	ands	r3, r2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	40da      	lsrs	r2, r3
 80012c8:	1e13      	subs	r3, r2, #0
 80012ca:	d000      	beq.n	80012ce <HAL_GPIO_Init+0x2be>
 80012cc:	e6a8      	b.n	8001020 <HAL_GPIO_Init+0x10>
  } 
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b006      	add	sp, #24
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	48000c00 	.word	0x48000c00
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	0008      	movs	r0, r1
 80012fa:	0011      	movs	r1, r2
 80012fc:	1cbb      	adds	r3, r7, #2
 80012fe:	1c02      	adds	r2, r0, #0
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	1c7b      	adds	r3, r7, #1
 8001304:	1c0a      	adds	r2, r1, #0
 8001306:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	1c7b      	adds	r3, r7, #1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	0002      	movs	r2, r0
 8001334:	1dbb      	adds	r3, r7, #6
 8001336:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	1dba      	adds	r2, r7, #6
 800133e:	8812      	ldrh	r2, [r2, #0]
 8001340:	4013      	ands	r3, r2
 8001342:	d008      	beq.n	8001356 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001346:	1dba      	adds	r2, r7, #6
 8001348:	8812      	ldrh	r2, [r2, #0]
 800134a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	1dbb      	adds	r3, r7, #6
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f807 	bl	8001364 <HAL_GPIO_EXTI_Callback>
  }
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	0002      	movs	r2, r0
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e305      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x1e>
 8001394:	e08d      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001396:	4bc5      	ldr	r3, [pc, #788]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	220c      	movs	r2, #12
 800139c:	4013      	ands	r3, r2
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00e      	beq.n	80013c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a2:	4bc2      	ldr	r3, [pc, #776]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	220c      	movs	r2, #12
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
 80013ae:	4bbf      	ldr	r3, [pc, #764]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	23c0      	movs	r3, #192	; 0xc0
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	401a      	ands	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10d      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4bba      	ldr	r3, [pc, #744]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x56>
 80013cc:	e070      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <HAL_RCC_OscConfig+0x60>
 80013d6:	e06b      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2dc      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x7c>
 80013e4:	4bb1      	ldr	r3, [pc, #708]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4bb0      	ldr	r3, [pc, #704]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0249      	lsls	r1, r1, #9
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e02f      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x9e>
 80013fc:	4bab      	ldr	r3, [pc, #684]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4baa      	ldr	r3, [pc, #680]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001402:	49ab      	ldr	r1, [pc, #684]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4ba8      	ldr	r3, [pc, #672]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4ba7      	ldr	r3, [pc, #668]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800140e:	49a9      	ldr	r1, [pc, #676]	; (80016b4 <HAL_RCC_OscConfig+0x33c>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e01e      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0xc4>
 800141e:	4ba3      	ldr	r3, [pc, #652]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4ba2      	ldr	r3, [pc, #648]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	02c9      	lsls	r1, r1, #11
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b9f      	ldr	r3, [pc, #636]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0249      	lsls	r1, r1, #9
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 800143c:	4b9b      	ldr	r3, [pc, #620]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b9a      	ldr	r3, [pc, #616]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001442:	499b      	ldr	r1, [pc, #620]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001444:	400a      	ands	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4b98      	ldr	r3, [pc, #608]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b97      	ldr	r3, [pc, #604]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800144e:	4999      	ldr	r1, [pc, #612]	; (80016b4 <HAL_RCC_OscConfig+0x33c>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d014      	beq.n	8001486 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fcce 	bl	8000dfc <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fcc9 	bl	8000dfc <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e28e      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0xee>
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fcb9 	bl	8000dfc <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcb4 	bl	8000dfc <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e279      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x118>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x146>
 80014bc:	e06c      	b.n	8001598 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014be:	4b7b      	ldr	r3, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	220c      	movs	r2, #12
 80014c4:	4013      	ands	r3, r2
 80014c6:	d00e      	beq.n	80014e6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c8:	4b78      	ldr	r3, [pc, #480]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d11f      	bne.n	8001514 <HAL_RCC_OscConfig+0x19c>
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	23c0      	movs	r3, #192	; 0xc0
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	401a      	ands	r2, r3
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b71      	ldr	r3, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x184>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e24c      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	22f8      	movs	r2, #248	; 0xf8
 8001502:	4393      	bics	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00da      	lsls	r2, r3, #3
 800150c:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e041      	b.n	8001598 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d024      	beq.n	8001566 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc68 	bl	8000dfc <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc63 	bl	8000dfc <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e228      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d0f1      	beq.n	8001532 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	22f8      	movs	r2, #248	; 0xf8
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00da      	lsls	r2, r3, #3
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e018      	b.n	8001598 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fc43 	bl	8000dfc <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fc3e 	bl	8000dfc <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e203      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d1f1      	bne.n	800157c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2208      	movs	r2, #8
 800159e:	4013      	ands	r3, r2
 80015a0:	d036      	beq.n	8001610 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80015ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fc21 	bl	8000dfc <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc1c 	bl	8000dfc <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1e1      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f1      	beq.n	80015c0 <HAL_RCC_OscConfig+0x248>
 80015dc:	e018      	b.n	8001610 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80015e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	438a      	bics	r2, r1
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc07 	bl	8000dfc <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc02 	bl	8000dfc <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d1f1      	bne.n	80015f4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2204      	movs	r2, #4
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_RCC_OscConfig+0x2a4>
 800161a:	e0b5      	b.n	8001788 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	231f      	movs	r3, #31
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	4013      	ands	r3, r2
 800162e:	d111      	bne.n	8001654 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001632:	69da      	ldr	r2, [r3, #28]
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0549      	lsls	r1, r1, #21
 800163a:	430a      	orrs	r2, r1
 800163c:	61da      	str	r2, [r3, #28]
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800164c:	231f      	movs	r3, #31
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d11a      	bne.n	8001696 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0049      	lsls	r1, r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fbc5 	bl	8000dfc <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fbc0 	bl	8000dfc <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e185      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10e      	bne.n	80016bc <HAL_RCC_OscConfig+0x344>
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	e035      	b.n	8001718 <HAL_RCC_OscConfig+0x3a0>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	fffeffff 	.word	0xfffeffff
 80016b4:	fffbffff 	.word	0xfffbffff
 80016b8:	40007000 	.word	0x40007000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x366>
 80016c4:	4bb6      	ldr	r3, [pc, #728]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4bb5      	ldr	r3, [pc, #724]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	438a      	bics	r2, r1
 80016ce:	621a      	str	r2, [r3, #32]
 80016d0:	4bb3      	ldr	r3, [pc, #716]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4bb2      	ldr	r3, [pc, #712]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016d6:	2104      	movs	r1, #4
 80016d8:	438a      	bics	r2, r1
 80016da:	621a      	str	r2, [r3, #32]
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x3a0>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x388>
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4bad      	ldr	r3, [pc, #692]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016ec:	2104      	movs	r1, #4
 80016ee:	430a      	orrs	r2, r1
 80016f0:	621a      	str	r2, [r3, #32]
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	4baa      	ldr	r3, [pc, #680]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	621a      	str	r2, [r3, #32]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x3a0>
 8001700:	4ba7      	ldr	r3, [pc, #668]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	4ba6      	ldr	r3, [pc, #664]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001706:	2101      	movs	r1, #1
 8001708:	438a      	bics	r2, r1
 800170a:	621a      	str	r2, [r3, #32]
 800170c:	4ba4      	ldr	r3, [pc, #656]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4ba3      	ldr	r3, [pc, #652]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001712:	2104      	movs	r1, #4
 8001714:	438a      	bics	r2, r1
 8001716:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb6c 	bl	8000dfc <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb67 	bl	8000dfc <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a9b      	ldr	r2, [pc, #620]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e12b      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x3b2>
 8001748:	e013      	b.n	8001772 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb57 	bl	8000dfc <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb52 	bl	8000dfc <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a91      	ldr	r2, [pc, #580]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e116      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	4b8d      	ldr	r3, [pc, #564]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001772:	231f      	movs	r3, #31
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001782:	4989      	ldr	r1, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x630>)
 8001784:	400a      	ands	r2, r1
 8001786:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2210      	movs	r2, #16
 800178e:	4013      	ands	r3, r2
 8001790:	d063      	beq.n	800185a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d12a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179e:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017a6:	4b7e      	ldr	r3, [pc, #504]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb23 	bl	8000dfc <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017bc:	f7ff fb1e 	bl	8000dfc <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0e3      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f1      	beq.n	80017bc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d8:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	22f8      	movs	r2, #248	; 0xf8
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	00da      	lsls	r2, r3, #3
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
 80017ee:	e034      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	3305      	adds	r3, #5
 80017f6:	d111      	bne.n	800181c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017f8:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001804:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	22f8      	movs	r2, #248	; 0xf8
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	00da      	lsls	r2, r3, #3
 8001814:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	e01e      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800181c:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800181e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001822:	2104      	movs	r1, #4
 8001824:	430a      	orrs	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fae2 	bl	8000dfc <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800183e:	f7ff fadd 	bl	8000dfc <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0a2      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x4ec>
 8001862:	e097      	b.n	8001994 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x4fa>
 8001870:	e06b      	b.n	800194a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d14c      	bne.n	8001914 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001880:	494a      	ldr	r1, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x634>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fab9 	bl	8000dfc <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fab4 	bl	8000dfc <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e079      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	049b      	lsls	r3, r3, #18
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	220f      	movs	r2, #15
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x638>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	431a      	orrs	r2, r3
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0449      	lsls	r1, r1, #17
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fa87 	bl	8000dfc <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fa82 	bl	8000dfc <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e047      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x57c>
 8001912:	e03f      	b.n	8001994 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800191a:	4924      	ldr	r1, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x634>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fa6c 	bl	8000dfc <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fa67 	bl	8000dfc <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e02c      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	049b      	lsls	r3, r3, #18
 8001944:	4013      	ands	r3, r2
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x5b2>
 8001948:	e024      	b.n	8001994 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e01f      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	23c0      	movs	r3, #192	; 0xc0
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	429a      	cmp	r2, r3
 8001970:	d10e      	bne.n	8001990 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	220f      	movs	r2, #15
 8001976:	401a      	ands	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	23f0      	movs	r3, #240	; 0xf0
 8001984:	039b      	lsls	r3, r3, #14
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b008      	add	sp, #32
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff
 80019ac:	feffffff 	.word	0xfeffffff
 80019b0:	ffc27fff 	.word	0xffc27fff

080019b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b3      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d911      	bls.n	80019fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09a      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d006      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a14:	21e0      	movs	r1, #224	; 0xe0
 8001a16:	00c9      	lsls	r1, r1, #3
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	22f0      	movs	r2, #240	; 0xf0
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d114      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	4013      	ands	r3, r2
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e062      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e05b      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f9b6 	bl	8000dfc <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff f9b1 	bl	8000dfc <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_RCC_ClockConfig+0x18c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e042      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	220c      	movs	r2, #12
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1ec      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d211      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e020      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_RCC_ClockConfig+0x190>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b0c:	f000 f820 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b10:	0001      	movs	r1, r0
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	220f      	movs	r2, #15
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x194>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	000a      	movs	r2, r1
 8001b22:	40da      	lsrs	r2, r3
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x198>)
 8001b26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f921 	bl	8000d70 <HAL_InitTick>
  
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	00001388 	.word	0x00001388
 8001b44:	fffff8ff 	.word	0xfffff8ff
 8001b48:	080034e4 	.word	0x080034e4
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b08f      	sub	sp, #60	; 0x3c
 8001b54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b56:	2314      	movs	r3, #20
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b6a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d002      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x4a>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d003      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x50>
 8001b98:	e02f      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9e:	e02f      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2214      	movs	r2, #20
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc0:	23c0      	movs	r3, #192	; 0xc0
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bd2:	f7fe fa99 	bl	8000108 <__udivsi3>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	001a      	movs	r2, r3
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	4353      	muls	r3, r2
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001be6:	f7fe fa8f 	bl	8000108 <__udivsi3>
 8001bea:	0003      	movs	r3, r0
 8001bec:	001a      	movs	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	4353      	muls	r3, r2
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf8:	e002      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b00f      	add	sp, #60	; 0x3c
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	080034c4 	.word	0x080034c4
 8001c10:	080034d4 	.word	0x080034d4
 8001c14:	40021000 	.word	0x40021000
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c34:	f7ff fff2 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c38:	0001      	movs	r1, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	2207      	movs	r2, #7
 8001c42:	4013      	ands	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	40d9      	lsrs	r1, r3
 8001c4a:	000b      	movs	r3, r1
}    
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	080034f4 	.word	0x080034f4

08001c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e08a      	b.n	8001d84 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	225d      	movs	r2, #93	; 0x5d
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	225c      	movs	r2, #92	; 0x5c
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7fe ff58 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	225d      	movs	r2, #93	; 0x5d
 8001c94:	2102      	movs	r1, #2
 8001c96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	23e0      	movs	r3, #224	; 0xe0
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d902      	bls.n	8001cba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e002      	b.n	8001cc0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	015b      	lsls	r3, r3, #5
 8001cbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	23f0      	movs	r3, #240	; 0xf0
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d008      	beq.n	8001cde <HAL_SPI_Init+0x82>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	23e0      	movs	r3, #224	; 0xe0
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	23e0      	movs	r3, #224	; 0xe0
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d903      	bls.n	8001cfa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf8:	e002      	b.n	8001d00 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6999      	ldr	r1, [r3, #24]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	400b      	ands	r3, r1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	0011      	movs	r1, r2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	2204      	movs	r2, #4
 8001d44:	401a      	ands	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	0011      	movs	r1, r2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4907      	ldr	r1, [pc, #28]	; (8001d8c <HAL_SPI_Init+0x130>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	225d      	movs	r2, #93	; 0x5d
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	fffff7ff 	.word	0xfffff7ff

08001d90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	1dbb      	adds	r3, r7, #6
 8001d9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001da0:	231f      	movs	r3, #31
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	225c      	movs	r2, #92	; 0x5c
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_SPI_Transmit+0x26>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e169      	b.n	800208a <HAL_SPI_Transmit+0x2fa>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	225c      	movs	r2, #92	; 0x5c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dbe:	f7ff f81d 	bl	8000dfc <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001dc6:	2316      	movs	r3, #22
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	1dba      	adds	r2, r7, #6
 8001dcc:	8812      	ldrh	r2, [r2, #0]
 8001dce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	225d      	movs	r2, #93	; 0x5d
 8001dd4:	5c9b      	ldrb	r3, [r3, r2]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d004      	beq.n	8001de6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ddc:	231f      	movs	r3, #31
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001de4:	e146      	b.n	8002074 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_SPI_Transmit+0x64>
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001df4:	231f      	movs	r3, #31
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dfc:	e13a      	b.n	8002074 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	225d      	movs	r2, #93	; 0x5d
 8001e02:	2103      	movs	r1, #3
 8001e04:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1dba      	adds	r2, r7, #6
 8001e16:	8812      	ldrh	r2, [r2, #0]
 8001e18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1dba      	adds	r2, r7, #6
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2244      	movs	r2, #68	; 0x44
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2246      	movs	r2, #70	; 0x46
 8001e34:	2100      	movs	r1, #0
 8001e36:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d108      	bne.n	8001e62 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	01c9      	lsls	r1, r1, #7
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d007      	beq.n	8001e80 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	23e0      	movs	r3, #224	; 0xe0
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d94e      	bls.n	8001f2a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_SPI_Transmit+0x10e>
 8001e94:	2316      	movs	r3, #22
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d13f      	bne.n	8001f1e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	1c9a      	adds	r2, r3, #2
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ec2:	e02c      	b.n	8001f1e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d112      	bne.n	8001ef8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	1c9a      	adds	r2, r3, #2
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef6:	e012      	b.n	8001f1e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef8:	f7fe ff80 	bl	8000dfc <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d802      	bhi.n	8001f0e <HAL_SPI_Transmit+0x17e>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_SPI_Transmit+0x184>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8001f14:	231f      	movs	r3, #31
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2203      	movs	r2, #3
 8001f1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f1c:	e0aa      	b.n	8002074 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1cd      	bne.n	8001ec4 <HAL_SPI_Transmit+0x134>
 8001f28:	e080      	b.n	800202c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_SPI_Transmit+0x1ae>
 8001f32:	2316      	movs	r3, #22
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d000      	beq.n	8001f3e <HAL_SPI_Transmit+0x1ae>
 8001f3c:	e071      	b.n	8002022 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d912      	bls.n	8001f6e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	881a      	ldrh	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	1c9a      	adds	r2, r3, #2
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b02      	subs	r3, #2
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f6c:	e059      	b.n	8002022 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001f94:	e045      	b.n	8002022 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d12b      	bne.n	8001ffc <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d912      	bls.n	8001fd4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	881a      	ldrh	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	1c9a      	adds	r2, r3, #2
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b02      	subs	r3, #2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fd2:	e026      	b.n	8002022 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ffa:	e012      	b.n	8002022 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffc:	f7fe fefe 	bl	8000dfc <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d802      	bhi.n	8002012 <HAL_SPI_Transmit+0x282>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_SPI_Transmit+0x288>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2203      	movs	r2, #3
 800201e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002020:	e028      	b.n	8002074 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1b4      	bne.n	8001f96 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fcee 	bl	8002a14 <SPI_EndRxTxTransaction>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d002      	beq.n	8002042 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002068:	231f      	movs	r3, #31
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e000      	b.n	8002074 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002072:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	225d      	movs	r2, #93	; 0x5d
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	225c      	movs	r2, #92	; 0x5c
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002084:	231f      	movs	r3, #31
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b008      	add	sp, #32
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020a4:	2317      	movs	r3, #23
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	2382      	movs	r3, #130	; 0x82
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d113      	bne.n	80020e0 <HAL_SPI_Receive+0x4c>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10f      	bne.n	80020e0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	225d      	movs	r2, #93	; 0x5d
 80020c4:	2104      	movs	r1, #4
 80020c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881c      	ldrh	r4, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	0023      	movs	r3, r4
 80020d8:	f000 f920 	bl	800231c <HAL_SPI_TransmitReceive>
 80020dc:	0003      	movs	r3, r0
 80020de:	e114      	b.n	800230a <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	225c      	movs	r2, #92	; 0x5c
 80020e4:	5c9b      	ldrb	r3, [r3, r2]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_SPI_Receive+0x5a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e10d      	b.n	800230a <HAL_SPI_Receive+0x276>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	225c      	movs	r2, #92	; 0x5c
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f6:	f7fe fe81 	bl	8000dfc <HAL_GetTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	225d      	movs	r2, #93	; 0x5d
 8002102:	5c9b      	ldrb	r3, [r3, r2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d004      	beq.n	8002114 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800210a:	2317      	movs	r3, #23
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
    goto error;
 8002112:	e0ef      	b.n	80022f4 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_SPI_Receive+0x8e>
 800211a:	1dbb      	adds	r3, r7, #6
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
    goto error;
 800212a:	e0e3      	b.n	80022f4 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	225d      	movs	r2, #93	; 0x5d
 8002130:	2104      	movs	r1, #4
 8002132:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1dba      	adds	r2, r7, #6
 8002144:	2144      	movs	r1, #68	; 0x44
 8002146:	8812      	ldrh	r2, [r2, #0]
 8002148:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1dba      	adds	r2, r7, #6
 800214e:	2146      	movs	r1, #70	; 0x46
 8002150:	8812      	ldrh	r2, [r2, #0]
 8002152:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	23e0      	movs	r3, #224	; 0xe0
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	429a      	cmp	r2, r3
 800217c:	d908      	bls.n	8002190 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4962      	ldr	r1, [pc, #392]	; (8002314 <HAL_SPI_Receive+0x280>)
 800218a:	400a      	ands	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e008      	b.n	80021a2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0149      	lsls	r1, r1, #5
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d107      	bne.n	80021be <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4957      	ldr	r1, [pc, #348]	; (8002318 <HAL_SPI_Receive+0x284>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d007      	beq.n	80021dc <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	23e0      	movs	r3, #224	; 0xe0
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d900      	bls.n	80021ea <HAL_SPI_Receive+0x156>
 80021e8:	e069      	b.n	80022be <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021ea:	e031      	b.n	8002250 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d117      	bne.n	800222a <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	001a      	movs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2246      	movs	r2, #70	; 0x46
 800221a:	5a9b      	ldrh	r3, [r3, r2]
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b299      	uxth	r1, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2246      	movs	r2, #70	; 0x46
 8002226:	5299      	strh	r1, [r3, r2]
 8002228:	e012      	b.n	8002250 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222a:	f7fe fde7 	bl	8000dfc <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d802      	bhi.n	8002240 <HAL_SPI_Receive+0x1ac>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_SPI_Receive+0x1b2>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2203      	movs	r2, #3
 800224c:	701a      	strb	r2, [r3, #0]
          goto error;
 800224e:	e051      	b.n	80022f4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2246      	movs	r2, #70	; 0x46
 8002254:	5a9b      	ldrh	r3, [r3, r2]
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1c7      	bne.n	80021ec <HAL_SPI_Receive+0x158>
 800225c:	e035      	b.n	80022ca <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	2b01      	cmp	r3, #1
 800226a:	d115      	bne.n	8002298 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	b292      	uxth	r2, r2
 8002278:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	1c9a      	adds	r2, r3, #2
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2246      	movs	r2, #70	; 0x46
 8002288:	5a9b      	ldrh	r3, [r3, r2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b299      	uxth	r1, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2246      	movs	r2, #70	; 0x46
 8002294:	5299      	strh	r1, [r3, r2]
 8002296:	e012      	b.n	80022be <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002298:	f7fe fdb0 	bl	8000dfc <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d802      	bhi.n	80022ae <HAL_SPI_Receive+0x21a>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_Receive+0x220>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2203      	movs	r2, #3
 80022ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80022bc:	e01a      	b.n	80022f4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	5a9b      	ldrh	r3, [r3, r2]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1c9      	bne.n	800225e <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 fb41 	bl	8002958 <SPI_EndRxTransaction>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 80022e8:	2317      	movs	r3, #23
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e000      	b.n	80022f4 <HAL_SPI_Receive+0x260>
  }

error :
 80022f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	225d      	movs	r2, #93	; 0x5d
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	225c      	movs	r2, #92	; 0x5c
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002304:	2317      	movs	r3, #23
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b007      	add	sp, #28
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	ffffefff 	.word	0xffffefff
 8002318:	ffffbfff 	.word	0xffffbfff

0800231c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	001a      	movs	r2, r3
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800232e:	2301      	movs	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002332:	2323      	movs	r3, #35	; 0x23
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	225c      	movs	r2, #92	; 0x5c
 800233e:	5c9b      	ldrb	r3, [r3, r2]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x2c>
 8002344:	2302      	movs	r3, #2
 8002346:	e21f      	b.n	8002788 <HAL_SPI_TransmitReceive+0x46c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	225c      	movs	r2, #92	; 0x5c
 800234c:	2101      	movs	r1, #1
 800234e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002350:	f7fe fd54 	bl	8000dfc <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002358:	201b      	movs	r0, #27
 800235a:	183b      	adds	r3, r7, r0
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	215d      	movs	r1, #93	; 0x5d
 8002360:	5c52      	ldrb	r2, [r2, r1]
 8002362:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800236a:	2312      	movs	r3, #18
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	1cba      	adds	r2, r7, #2
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8002374:	2310      	movs	r3, #16
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	1cba      	adds	r2, r7, #2
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800237e:	183b      	adds	r3, r7, r0
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d012      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x90>
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	2382      	movs	r3, #130	; 0x82
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	429a      	cmp	r2, r3
 800238e:	d108      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x86>
 8002398:	231b      	movs	r3, #27
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d004      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 80023a2:	2323      	movs	r3, #35	; 0x23
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80023aa:	e1e2      	b.n	8002772 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0xa4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0xa4>
 80023b8:	1cbb      	adds	r3, r7, #2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80023c0:	2323      	movs	r3, #35	; 0x23
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023c8:	e1d3      	b.n	8002772 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	225d      	movs	r2, #93	; 0x5d
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d003      	beq.n	80023de <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	225d      	movs	r2, #93	; 0x5d
 80023da:	2105      	movs	r1, #5
 80023dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1cba      	adds	r2, r7, #2
 80023ee:	2146      	movs	r1, #70	; 0x46
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1cba      	adds	r2, r7, #2
 80023f8:	2144      	movs	r1, #68	; 0x44
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1cba      	adds	r2, r7, #2
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1cba      	adds	r2, r7, #2
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	23e0      	movs	r3, #224	; 0xe0
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	429a      	cmp	r2, r3
 800242a:	d804      	bhi.n	8002436 <HAL_SPI_TransmitReceive+0x11a>
 800242c:	2310      	movs	r3, #16
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d908      	bls.n	8002448 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	49ca      	ldr	r1, [pc, #808]	; (800276c <HAL_SPI_TransmitReceive+0x450>)
 8002442:	400a      	ands	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e008      	b.n	800245a <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0149      	lsls	r1, r1, #5
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	4013      	ands	r3, r2
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d007      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	23e0      	movs	r3, #224	; 0xe0
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	429a      	cmp	r2, r3
 8002482:	d800      	bhi.n	8002486 <HAL_SPI_TransmitReceive+0x16a>
 8002484:	e07f      	b.n	8002586 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_SPI_TransmitReceive+0x17e>
 800248e:	2312      	movs	r3, #18
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d000      	beq.n	800249a <HAL_SPI_TransmitReceive+0x17e>
 8002498:	e069      	b.n	800256e <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024be:	e056      	b.n	800256e <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11b      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x1ea>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d016      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x1ea>
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d113      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	1c9a      	adds	r2, r3, #2
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	2b01      	cmp	r3, #1
 8002512:	d11c      	bne.n	800254e <HAL_SPI_TransmitReceive+0x232>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2246      	movs	r2, #70	; 0x46
 8002518:	5a9b      	ldrh	r3, [r3, r2]
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d016      	beq.n	800254e <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	b292      	uxth	r2, r2
 800252c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	1c9a      	adds	r2, r3, #2
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2246      	movs	r2, #70	; 0x46
 800253c:	5a9b      	ldrh	r3, [r3, r2]
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b299      	uxth	r1, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2246      	movs	r2, #70	; 0x46
 8002548:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800254e:	f7fe fc55 	bl	8000dfc <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255a:	429a      	cmp	r2, r3
 800255c:	d807      	bhi.n	800256e <HAL_SPI_TransmitReceive+0x252>
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	3301      	adds	r3, #1
 8002562:	d004      	beq.n	800256e <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8002564:	2323      	movs	r3, #35	; 0x23
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2203      	movs	r2, #3
 800256a:	701a      	strb	r2, [r3, #0]
        goto error;
 800256c:	e101      	b.n	8002772 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1a3      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x1a4>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2246      	movs	r2, #70	; 0x46
 800257c:	5a9b      	ldrh	r3, [r3, r2]
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d19d      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x1a4>
 8002584:	e0e2      	b.n	800274c <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_SPI_TransmitReceive+0x27e>
 800258e:	2312      	movs	r3, #18
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d000      	beq.n	800259a <HAL_SPI_TransmitReceive+0x27e>
 8002598:	e0cb      	b.n	8002732 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d912      	bls.n	80025ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b02      	subs	r3, #2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025c8:	e0b3      	b.n	8002732 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f0:	e09f      	b.n	8002732 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d134      	bne.n	800266a <HAL_SPI_TransmitReceive+0x34e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02f      	beq.n	800266a <HAL_SPI_TransmitReceive+0x34e>
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d12c      	bne.n	800266a <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d912      	bls.n	8002640 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b02      	subs	r3, #2
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800263e:	e012      	b.n	8002666 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	2b01      	cmp	r3, #1
 8002676:	d149      	bne.n	800270c <HAL_SPI_TransmitReceive+0x3f0>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2246      	movs	r2, #70	; 0x46
 800267c:	5a9b      	ldrh	r3, [r3, r2]
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d043      	beq.n	800270c <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2246      	movs	r2, #70	; 0x46
 8002688:	5a9b      	ldrh	r3, [r3, r2]
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d924      	bls.n	80026da <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	1c9a      	adds	r2, r3, #2
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2246      	movs	r2, #70	; 0x46
 80026ac:	5a9b      	ldrh	r3, [r3, r2]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b02      	subs	r3, #2
 80026b2:	b299      	uxth	r1, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2246      	movs	r2, #70	; 0x46
 80026b8:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2246      	movs	r2, #70	; 0x46
 80026be:	5a9b      	ldrh	r3, [r3, r2]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d820      	bhi.n	8002708 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	0149      	lsls	r1, r1, #5
 80026d4:	430a      	orrs	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e016      	b.n	8002708 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	001a      	movs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2246      	movs	r2, #70	; 0x46
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b299      	uxth	r1, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2246      	movs	r2, #70	; 0x46
 8002706:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002708:	2301      	movs	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800270c:	f7fe fb76 	bl	8000dfc <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002718:	429a      	cmp	r2, r3
 800271a:	d802      	bhi.n	8002722 <HAL_SPI_TransmitReceive+0x406>
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	3301      	adds	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x40c>
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8002728:	2323      	movs	r3, #35	; 0x23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2203      	movs	r2, #3
 800272e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002730:	e01f      	b.n	8002772 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <HAL_SPI_TransmitReceive+0x422>
 800273c:	e759      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x2d6>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2246      	movs	r2, #70	; 0x46
 8002742:	5a9b      	ldrh	r3, [r3, r2]
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d000      	beq.n	800274c <HAL_SPI_TransmitReceive+0x430>
 800274a:	e752      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f95e 	bl	8002a14 <SPI_EndRxTxTransaction>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d009      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 800275c:	2323      	movs	r3, #35	; 0x23
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	661a      	str	r2, [r3, #96]	; 0x60
 800276a:	e002      	b.n	8002772 <HAL_SPI_TransmitReceive+0x456>
 800276c:	ffffefff 	.word	0xffffefff
  }

error :
 8002770:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	225d      	movs	r2, #93	; 0x5d
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	225c      	movs	r2, #92	; 0x5c
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002782:	2323      	movs	r3, #35	; 0x23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b00a      	add	sp, #40	; 0x28
 800278e:	bd80      	pop	{r7, pc}

08002790 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a0:	e050      	b.n	8002844 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	d04d      	beq.n	8002844 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027a8:	f7fe fb28 	bl	8000dfc <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d902      	bls.n	80027be <SPI_WaitFlagStateUntilTimeout+0x2e>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d142      	bne.n	8002844 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	21e0      	movs	r1, #224	; 0xe0
 80027ca:	438a      	bics	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	2382      	movs	r3, #130	; 0x82
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d113      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x72>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d005      	beq.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d107      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	438a      	bics	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	429a      	cmp	r2, r3
 800280c:	d110      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4914      	ldr	r1, [pc, #80]	; (800286c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800281a:	400a      	ands	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0189      	lsls	r1, r1, #6
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	225d      	movs	r2, #93	; 0x5d
 8002834:	2101      	movs	r1, #1
 8002836:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	225c      	movs	r2, #92	; 0x5c
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e00f      	b.n	8002864 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	425a      	negs	r2, r3
 8002854:	4153      	adcs	r3, r2
 8002856:	b2db      	uxtb	r3, r3
 8002858:	001a      	movs	r2, r3
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d19f      	bne.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}
 800286c:	ffffdfff 	.word	0xffffdfff

08002870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800287e:	e05c      	b.n	800293a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <SPI_WaitFifoStateUntilTimeout+0x28>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	d04d      	beq.n	800293a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800289e:	f7fe faad 	bl	8000dfc <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d902      	bls.n	80028b4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d142      	bne.n	800293a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	21e0      	movs	r1, #224	; 0xe0
 80028c0:	438a      	bics	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2382      	movs	r3, #130	; 0x82
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d113      	bne.n	80028f8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	429a      	cmp	r2, r3
 80028da:	d005      	beq.n	80028e8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	019b      	lsls	r3, r3, #6
 8002900:	429a      	cmp	r2, r3
 8002902:	d110      	bne.n	8002926 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4911      	ldr	r1, [pc, #68]	; (8002954 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0189      	lsls	r1, r1, #6
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	225d      	movs	r2, #93	; 0x5d
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	225c      	movs	r2, #92	; 0x5c
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e008      	b.n	800294c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d19a      	bne.n	8002880 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	ffffdfff 	.word	0xffffdfff

08002958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	2382      	movs	r3, #130	; 0x82
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	429a      	cmp	r2, r3
 800296e:	d113      	bne.n	8002998 <SPI_EndRxTransaction+0x40>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d005      	beq.n	8002988 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	0013      	movs	r3, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	f7ff fef3 	bl	8002790 <SPI_WaitFlagStateUntilTimeout>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d007      	beq.n	80029be <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	2220      	movs	r2, #32
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e026      	b.n	8002a0c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	2382      	movs	r3, #130	; 0x82
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d11f      	bne.n	8002a0a <SPI_EndRxTransaction+0xb2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d005      	beq.n	80029e2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	429a      	cmp	r2, r3
 80029e0:	d113      	bne.n	8002a0a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	23c0      	movs	r3, #192	; 0xc0
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	0013      	movs	r3, r2
 80029f0:	2200      	movs	r2, #0
 80029f2:	f7ff ff3d 	bl	8002870 <SPI_WaitFifoStateUntilTimeout>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d007      	beq.n	8002a0a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	2220      	movs	r2, #32
 8002a00:	431a      	orrs	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e000      	b.n	8002a0c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	23c0      	movs	r3, #192	; 0xc0
 8002a24:	0159      	lsls	r1, r3, #5
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f7ff ff1e 	bl	8002870 <SPI_WaitFifoStateUntilTimeout>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d007      	beq.n	8002a48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e027      	b.n	8002a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	0013      	movs	r3, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	f7ff fe9b 	bl	8002790 <SPI_WaitFlagStateUntilTimeout>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d007      	beq.n	8002a6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a62:	2220      	movs	r2, #32
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e014      	b.n	8002a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	23c0      	movs	r3, #192	; 0xc0
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f7ff fef7 	bl	8002870 <SPI_WaitFifoStateUntilTimeout>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d007      	beq.n	8002a96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e000      	b.n	8002a98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e044      	b.n	8002b3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2270      	movs	r2, #112	; 0x70
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fe f887 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2224      	movs	r2, #36	; 0x24
 8002ace:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f8d8 	bl	8002c98 <UART_SetConfig>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e024      	b.n	8002b3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 fa51 	bl	8002fa4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	490d      	ldr	r1, [pc, #52]	; (8002b44 <HAL_UART_Init+0xa4>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2108      	movs	r1, #8
 8002b1e:	438a      	bics	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 fae9 	bl	800310c <UART_CheckIdleState>
 8002b3a:	0003      	movs	r3, r0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	fffff7ff 	.word	0xfffff7ff

08002b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d000      	beq.n	8002b62 <HAL_UART_Transmit+0x1a>
 8002b60:	e095      	b.n	8002c8e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_UART_Transmit+0x28>
 8002b68:	1dbb      	adds	r3, r7, #6
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e08d      	b.n	8002c90 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d109      	bne.n	8002b94 <HAL_UART_Transmit+0x4c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e07d      	b.n	8002c90 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2270      	movs	r2, #112	; 0x70
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Transmit+0x5a>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e076      	b.n	8002c90 <HAL_UART_Transmit+0x148>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2270      	movs	r2, #112	; 0x70
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2221      	movs	r2, #33	; 0x21
 8002bb4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002bb6:	f7fe f921 	bl	8000dfc <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1dba      	adds	r2, r7, #6
 8002bc2:	2150      	movs	r1, #80	; 0x50
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1dba      	adds	r2, r7, #6
 8002bcc:	2152      	movs	r1, #82	; 0x52
 8002bce:	8812      	ldrh	r2, [r2, #0]
 8002bd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d108      	bne.n	8002bf0 <HAL_UART_Transmit+0xa8>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e003      	b.n	8002bf8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bf8:	e02d      	b.n	8002c56 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	0013      	movs	r3, r2
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	f000 fac6 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e03d      	b.n	8002c90 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	05d2      	lsls	r2, r2, #23
 8002c24:	0dd2      	lsrs	r2, r2, #23
 8002c26:	b292      	uxth	r2, r2
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e008      	b.n	8002c44 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2252      	movs	r2, #82	; 0x52
 8002c48:	5a9b      	ldrh	r3, [r3, r2]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2252      	movs	r2, #82	; 0x52
 8002c54:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2252      	movs	r2, #82	; 0x52
 8002c5a:	5a9b      	ldrh	r3, [r3, r2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1cb      	bne.n	8002bfa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	f000 fa92 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e009      	b.n	8002c90 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2270      	movs	r2, #112	; 0x70
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b008      	add	sp, #32
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca4:	2317      	movs	r3, #23
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4aad      	ldr	r2, [pc, #692]	; (8002f80 <UART_SetConfig+0x2e8>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4aa8      	ldr	r2, [pc, #672]	; (8002f84 <UART_SetConfig+0x2ec>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a9f      	ldr	r2, [pc, #636]	; (8002f88 <UART_SetConfig+0x2f0>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a9b      	ldr	r2, [pc, #620]	; (8002f8c <UART_SetConfig+0x2f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d125      	bne.n	8002d6e <UART_SetConfig+0xd6>
 8002d22:	4b9b      	ldr	r3, [pc, #620]	; (8002f90 <UART_SetConfig+0x2f8>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d00f      	beq.n	8002d4e <UART_SetConfig+0xb6>
 8002d2e:	d304      	bcc.n	8002d3a <UART_SetConfig+0xa2>
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d011      	beq.n	8002d58 <UART_SetConfig+0xc0>
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d005      	beq.n	8002d44 <UART_SetConfig+0xac>
 8002d38:	e013      	b.n	8002d62 <UART_SetConfig+0xca>
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e022      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d44:	231f      	movs	r3, #31
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2202      	movs	r2, #2
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e01d      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d4e:	231f      	movs	r3, #31
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2204      	movs	r2, #4
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e018      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d58:	231f      	movs	r3, #31
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e013      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d62:	231f      	movs	r3, #31
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2210      	movs	r2, #16
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	e00d      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a88      	ldr	r2, [pc, #544]	; (8002f94 <UART_SetConfig+0x2fc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d104      	bne.n	8002d82 <UART_SetConfig+0xea>
 8002d78:	231f      	movs	r3, #31
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e003      	b.n	8002d8a <UART_SetConfig+0xf2>
 8002d82:	231f      	movs	r3, #31
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2210      	movs	r2, #16
 8002d88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d000      	beq.n	8002d98 <UART_SetConfig+0x100>
 8002d96:	e07d      	b.n	8002e94 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002d98:	231f      	movs	r3, #31
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d01c      	beq.n	8002ddc <UART_SetConfig+0x144>
 8002da2:	dc02      	bgt.n	8002daa <UART_SetConfig+0x112>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <UART_SetConfig+0x11c>
 8002da8:	e04b      	b.n	8002e42 <UART_SetConfig+0x1aa>
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d025      	beq.n	8002dfa <UART_SetConfig+0x162>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d037      	beq.n	8002e22 <UART_SetConfig+0x18a>
 8002db2:	e046      	b.n	8002e42 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7fe ff3c 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	005a      	lsls	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	18d2      	adds	r2, r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0019      	movs	r1, r3
 8002dce:	0010      	movs	r0, r2
 8002dd0:	f7fd f99a 	bl	8000108 <__udivsi3>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
        break;
 8002dda:	e037      	b.n	8002e4c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <UART_SetConfig+0x300>)
 8002de4:	189a      	adds	r2, r3, r2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f7fd f98b 	bl	8000108 <__udivsi3>
 8002df2:	0003      	movs	r3, r0
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	61bb      	str	r3, [r7, #24]
        break;
 8002df8:	e028      	b.n	8002e4c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfa:	f7fe fea9 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	005a      	lsls	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	18d2      	adds	r2, r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0019      	movs	r1, r3
 8002e14:	0010      	movs	r0, r2
 8002e16:	f7fd f977 	bl	8000108 <__udivsi3>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e014      	b.n	8002e4c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	0252      	lsls	r2, r2, #9
 8002e2c:	189a      	adds	r2, r3, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0019      	movs	r1, r3
 8002e34:	0010      	movs	r0, r2
 8002e36:	f7fd f967 	bl	8000108 <__udivsi3>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	61bb      	str	r3, [r7, #24]
        break;
 8002e40:	e004      	b.n	8002e4c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002e42:	2317      	movs	r3, #23
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
        break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d91b      	bls.n	8002e8a <UART_SetConfig+0x1f2>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4a51      	ldr	r2, [pc, #324]	; (8002f9c <UART_SetConfig+0x304>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d817      	bhi.n	8002e8a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	200a      	movs	r0, #10
 8002e60:	183b      	adds	r3, r7, r0
 8002e62:	210f      	movs	r1, #15
 8002e64:	438a      	bics	r2, r1
 8002e66:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2207      	movs	r2, #7
 8002e70:	4013      	ands	r3, r2
 8002e72:	b299      	uxth	r1, r3
 8002e74:	183b      	adds	r3, r7, r0
 8002e76:	183a      	adds	r2, r7, r0
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	183a      	adds	r2, r7, r0
 8002e84:	8812      	ldrh	r2, [r2, #0]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	e06c      	b.n	8002f64 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002e8a:	2317      	movs	r3, #23
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e067      	b.n	8002f64 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002e94:	231f      	movs	r3, #31
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d01b      	beq.n	8002ed6 <UART_SetConfig+0x23e>
 8002e9e:	dc02      	bgt.n	8002ea6 <UART_SetConfig+0x20e>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <UART_SetConfig+0x218>
 8002ea4:	e049      	b.n	8002f3a <UART_SetConfig+0x2a2>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d024      	beq.n	8002ef4 <UART_SetConfig+0x25c>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d035      	beq.n	8002f1a <UART_SetConfig+0x282>
 8002eae:	e044      	b.n	8002f3a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f7fe febe 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	085a      	lsrs	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	18d2      	adds	r2, r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	0010      	movs	r0, r2
 8002eca:	f7fd f91d 	bl	8000108 <__udivsi3>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	61bb      	str	r3, [r7, #24]
        break;
 8002ed4:	e036      	b.n	8002f44 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <UART_SetConfig+0x308>)
 8002ede:	189a      	adds	r2, r3, r2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f7fd f90e 	bl	8000108 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
        break;
 8002ef2:	e027      	b.n	8002f44 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef4:	f7fe fe2c 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	085a      	lsrs	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	18d2      	adds	r2, r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f7fd f8fb 	bl	8000108 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e014      	b.n	8002f44 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	0212      	lsls	r2, r2, #8
 8002f24:	189a      	adds	r2, r3, r2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f7fd f8eb 	bl	8000108 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	61bb      	str	r3, [r7, #24]
        break;
 8002f38:	e004      	b.n	8002f44 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002f3a:	2317      	movs	r3, #23
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
        break;
 8002f42:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d908      	bls.n	8002f5c <UART_SetConfig+0x2c4>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <UART_SetConfig+0x304>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d804      	bhi.n	8002f5c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e003      	b.n	8002f64 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002f5c:	2317      	movs	r3, #23
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f70:	2317      	movs	r3, #23
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b008      	add	sp, #32
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	efff69f3 	.word	0xefff69f3
 8002f84:	ffffcfff 	.word	0xffffcfff
 8002f88:	fffff4ff 	.word	0xfffff4ff
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40004400 	.word	0x40004400
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	0000ffff 	.word	0x0000ffff
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <UART_AdvFeatureConfig+0x144>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a43      	ldr	r2, [pc, #268]	; (80030ec <UART_AdvFeatureConfig+0x148>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <UART_AdvFeatureConfig+0x14c>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	d00b      	beq.n	8003034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a34      	ldr	r2, [pc, #208]	; (80030f4 <UART_AdvFeatureConfig+0x150>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2210      	movs	r2, #16
 800303a:	4013      	ands	r3, r2
 800303c:	d00b      	beq.n	8003056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <UART_AdvFeatureConfig+0x154>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2220      	movs	r2, #32
 800305c:	4013      	ands	r3, r2
 800305e:	d00b      	beq.n	8003078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <UART_AdvFeatureConfig+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2240      	movs	r2, #64	; 0x40
 800307e:	4013      	ands	r3, r2
 8003080:	d01d      	beq.n	80030be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <UART_AdvFeatureConfig+0x15c>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	035b      	lsls	r3, r3, #13
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10b      	bne.n	80030be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <UART_AdvFeatureConfig+0x160>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <UART_AdvFeatureConfig+0x164>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fffdffff 	.word	0xfffdffff
 80030ec:	fffeffff 	.word	0xfffeffff
 80030f0:	fffbffff 	.word	0xfffbffff
 80030f4:	ffff7fff 	.word	0xffff7fff
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	ffefffff 	.word	0xffefffff
 8003104:	ff9fffff 	.word	0xff9fffff
 8003108:	fff7ffff 	.word	0xfff7ffff

0800310c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800311a:	f7fd fe6f 	bl	8000dfc <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	4013      	ands	r3, r2
 800312c:	2b08      	cmp	r3, #8
 800312e:	d10d      	bne.n	800314c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	0399      	lsls	r1, r3, #14
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <UART_CheckIdleState+0x88>)
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	0013      	movs	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	f000 f82a 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d001      	beq.n	800314c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e01f      	b.n	800318c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	2b04      	cmp	r3, #4
 8003158:	d10d      	bne.n	8003176 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	03d9      	lsls	r1, r3, #15
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <UART_CheckIdleState+0x88>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	0013      	movs	r3, r2
 8003168:	2200      	movs	r2, #0
 800316a:	f000 f815 	bl	8003198 <UART_WaitOnFlagUntilTimeout>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d001      	beq.n	8003176 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00a      	b.n	800318c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2270      	movs	r2, #112	; 0x70
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b004      	add	sp, #16
 8003192:	bd80      	pop	{r7, pc}
 8003194:	01ffffff 	.word	0x01ffffff

08003198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a8:	e05d      	b.n	8003266 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	3301      	adds	r3, #1
 80031ae:	d05a      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7fd fe24 	bl	8000dfc <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11b      	bne.n	80031fe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	492f      	ldr	r1, [pc, #188]	; (8003290 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80031d2:	400a      	ands	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2270      	movs	r2, #112	; 0x70
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e043      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d02d      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	401a      	ands	r2, r3
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	429a      	cmp	r2, r3
 800321c:	d123      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4917      	ldr	r1, [pc, #92]	; (8003290 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003234:	400a      	ands	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2101      	movs	r1, #1
 8003244:	438a      	bics	r2, r1
 8003246:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2270      	movs	r2, #112	; 0x70
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e00f      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	425a      	negs	r2, r3
 8003276:	4153      	adcs	r3, r2
 8003278:	b2db      	uxtb	r3, r3
 800327a:	001a      	movs	r2, r3
 800327c:	1dfb      	adds	r3, r7, #7
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d092      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	fffffe5f 	.word	0xfffffe5f

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	2600      	movs	r6, #0
 8003298:	4d0c      	ldr	r5, [pc, #48]	; (80032cc <__libc_init_array+0x38>)
 800329a:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	2600      	movs	r6, #0
 80032a6:	f000 f82b 	bl	8003300 <_init>
 80032aa:	4d0a      	ldr	r5, [pc, #40]	; (80032d4 <__libc_init_array+0x40>)
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <__libc_init_array+0x44>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	00b3      	lsls	r3, r6, #2
 80032ba:	58eb      	ldr	r3, [r5, r3]
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	00b3      	lsls	r3, r6, #2
 80032c4:	58eb      	ldr	r3, [r5, r3]
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	080034fc 	.word	0x080034fc
 80032d0:	080034fc 	.word	0x080034fc
 80032d4:	080034fc 	.word	0x080034fc
 80032d8:	08003500 	.word	0x08003500

080032dc <memcpy>:
 80032dc:	2300      	movs	r3, #0
 80032de:	b510      	push	{r4, lr}
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d100      	bne.n	80032e6 <memcpy+0xa>
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	5ccc      	ldrb	r4, [r1, r3]
 80032e8:	54c4      	strb	r4, [r0, r3]
 80032ea:	3301      	adds	r3, #1
 80032ec:	e7f8      	b.n	80032e0 <memcpy+0x4>

080032ee <memset>:
 80032ee:	0003      	movs	r3, r0
 80032f0:	1812      	adds	r2, r2, r0
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d100      	bne.n	80032f8 <memset+0xa>
 80032f6:	4770      	bx	lr
 80032f8:	7019      	strb	r1, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	e7f9      	b.n	80032f2 <memset+0x4>
	...

08003300 <_init>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr

0800330c <_fini>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr
