
DoorCard_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003470  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003724  08003724  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003724  08003724  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003724  08003724  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800372c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003738  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003738  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c18  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000155f  00000000  00000000  00027c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  000291b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d042  00000000  00000000  0002a138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069a8  00000000  00000000  0003717a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045ada  00000000  00000000  0003db22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000835fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c10  00000000  00000000  00083678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003518 	.word	0x08003518

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003518 	.word	0x08003518

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_Z12arrayComparePhS_>:

#include "si446x.h"


  bool arrayCompare(uint8_t* arr1, uint8_t* arr2)
  {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	  for(int i = 0; i < 7; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2b06      	cmp	r3, #6
 8000232:	dc0f      	bgt.n	8000254 <_Z12arrayComparePhS_+0x34>
	  {
		  if(arr1[i] != arr2[i])
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	18d3      	adds	r3, r2, r3
 800023a:	781a      	ldrb	r2, [r3, #0]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	6839      	ldr	r1, [r7, #0]
 8000240:	18cb      	adds	r3, r1, r3
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d001      	beq.n	800024c <_Z12arrayComparePhS_+0x2c>
		  {
			  return false;
 8000248:	2300      	movs	r3, #0
 800024a:	e004      	b.n	8000256 <_Z12arrayComparePhS_+0x36>
	  for(int i = 0; i < 7; i++)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3301      	adds	r3, #1
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	e7ec      	b.n	800022e <_Z12arrayComparePhS_+0xe>
		  }
	  }
	  return true;
 8000254:	2301      	movs	r3, #1
  }
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b09c      	sub	sp, #112	; 0x70
 8000264:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fe5f 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f8d3 	bl	8000414 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f98f 	bl	8000590 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000272:	f000 f917 	bl	80004a4 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000276:	f000 f957 	bl	8000528 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */


  si446x rf(GPIOA, &hspi1, nSEL_Pin, SDN_Pin, IRQ_Pin); //446x object
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	019c      	lsls	r4, r3, #6
 800027e:	4a5f      	ldr	r2, [pc, #380]	; (80003fc <main+0x19c>)
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05d9      	lsls	r1, r3, #23
 8000284:	2534      	movs	r5, #52	; 0x34
 8000286:	1978      	adds	r0, r7, r5
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2380      	movs	r3, #128	; 0x80
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	0023      	movs	r3, r4
 8000296:	f000 fa32 	bl	80006fe <_ZN6si446xC1EP12GPIO_TypeDefP19__SPI_HandleTypeDefttt>
  rf.powerUp(); //Power up
 800029a:	197b      	adds	r3, r7, r5
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fa96 	bl	80007ce <_ZN6si446x7powerUpEv>
	  uint8_t data[] = "123456789";
	  rf.sendPacket(data, sizeof(data), 1);
	  //HAL_Delay(5000);
	   */

	  if(HAL_GPIO_ReadPin(GPIOA, SW3_Pin) == GPIO_PIN_SET) // Test if SW3 is high
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2102      	movs	r1, #2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f911 	bl	80014d0 <HAL_GPIO_ReadPin>
 80002ae:	0003      	movs	r3, r0
 80002b0:	3b01      	subs	r3, #1
 80002b2:	425a      	negs	r2, r3
 80002b4:	4153      	adcs	r3, r2
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f2      	beq.n	80002a2 <main+0x42>
	  {
		 for(int i = 0; i<2; i++) //Blink thre times as heartbeat
 80002bc:	2300      	movs	r3, #0
 80002be:	667b      	str	r3, [r7, #100]	; 0x64
 80002c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	dc15      	bgt.n	80002f2 <main+0x92>
			 	  {
			 		  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 80002c6:	4b4e      	ldr	r3, [pc, #312]	; (8000400 <main+0x1a0>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	2102      	movs	r1, #2
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f91c 	bl	800150a <HAL_GPIO_WritePin>
			 	  	  HAL_Delay(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 fe8c 	bl	8000ff0 <HAL_Delay>
			 	  	  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 80002d8:	4b49      	ldr	r3, [pc, #292]	; (8000400 <main+0x1a0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	2102      	movs	r1, #2
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f913 	bl	800150a <HAL_GPIO_WritePin>
			 	  	  HAL_Delay(100);
 80002e4:	2064      	movs	r0, #100	; 0x64
 80002e6:	f000 fe83 	bl	8000ff0 <HAL_Delay>
		 for(int i = 0; i<2; i++) //Blink thre times as heartbeat
 80002ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80002ec:	3301      	adds	r3, #1
 80002ee:	667b      	str	r3, [r7, #100]	; 0x64
 80002f0:	e7e6      	b.n	80002c0 <main+0x60>
			 	  }
		 for(int j = 0; j < 5; j++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	663b      	str	r3, [r7, #96]	; 0x60
 80002f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	dcd2      	bgt.n	80002a2 <main+0x42>
		 {
		  	  uint8_t data[] = "1234567";
 80002fc:	212c      	movs	r1, #44	; 0x2c
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	4a40      	ldr	r2, [pc, #256]	; (8000404 <main+0x1a4>)
 8000302:	ca11      	ldmia	r2!, {r0, r4}
 8000304:	c311      	stmia	r3!, {r0, r4}
		  	  rf.sendPacket(data, sizeof(data), 1);
 8000306:	1879      	adds	r1, r7, r1
 8000308:	2434      	movs	r4, #52	; 0x34
 800030a:	1938      	adds	r0, r7, r4
 800030c:	2301      	movs	r3, #1
 800030e:	2208      	movs	r2, #8
 8000310:	f000 fa21 	bl	8000756 <_ZN6si446x10sendPacketEPhth>
			  rf.startRX(1);
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fbaf 	bl	8000a7c <_ZN6si446x7startRXEh>
			  for(int i = 0; i<5; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000324:	2b04      	cmp	r3, #4
 8000326:	dc64      	bgt.n	80003f2 <main+0x192>
			  {
				  HAL_Delay(75);
 8000328:	204b      	movs	r0, #75	; 0x4b
 800032a:	f000 fe61 	bl	8000ff0 <HAL_Delay>
				  uint8_t fifoBytes = rf.getRxFifoInfo();
 800032e:	2557      	movs	r5, #87	; 0x57
 8000330:	197c      	adds	r4, r7, r5
 8000332:	2334      	movs	r3, #52	; 0x34
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fbd1 	bl	8000ade <_ZN6si446x13getRxFifoInfoEv>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]
				  uint8_t buf[8] = {0x00};
 8000340:	2324      	movs	r3, #36	; 0x24
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	0018      	movs	r0, r3
 8000346:	2308      	movs	r3, #8
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f003 f8db 	bl	8003506 <memset>
				  if(fifoBytes > 0)
 8000350:	197b      	adds	r3, r7, r5
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d047      	beq.n	80003e8 <main+0x188>
					  {
					  uint8_t packetReceived[] = "/n Packet Received \n";
 8000358:	210c      	movs	r1, #12
 800035a:	187b      	adds	r3, r7, r1
 800035c:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <main+0x1a8>)
 800035e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000360:	c331      	stmia	r3!, {r0, r4, r5}
 8000362:	ca11      	ldmia	r2!, {r0, r4}
 8000364:	c311      	stmia	r3!, {r0, r4}
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit(&huart2, packetReceived, sizeof(packetReceived), 1000);
 800036a:	23fa      	movs	r3, #250	; 0xfa
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	1879      	adds	r1, r7, r1
 8000370:	4826      	ldr	r0, [pc, #152]	; (800040c <main+0x1ac>)
 8000372:	2215      	movs	r2, #21
 8000374:	f002 fcf4 	bl	8002d60 <HAL_UART_Transmit>
					  rf.getPacket(buf, fifoBytes);
 8000378:	2357      	movs	r3, #87	; 0x57
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	2424      	movs	r4, #36	; 0x24
 8000380:	1939      	adds	r1, r7, r4
 8000382:	2334      	movs	r3, #52	; 0x34
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fbde 	bl	8000b48 <_ZN6si446x9getPacketEPhh>
					  HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 800038c:	23fa      	movs	r3, #250	; 0xfa
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	1939      	adds	r1, r7, r4
 8000392:	481e      	ldr	r0, [pc, #120]	; (800040c <main+0x1ac>)
 8000394:	2208      	movs	r2, #8
 8000396:	f002 fce3 	bl	8002d60 <HAL_UART_Transmit>
					  uint8_t answer[] = "7654321";
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <main+0x1b0>)
 800039e:	ca03      	ldmia	r2!, {r0, r1}
 80003a0:	c303      	stmia	r3!, {r0, r1}
					  if(arrayCompare(buf, answer) == true)
 80003a2:	1d3a      	adds	r2, r7, #4
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f7ff ff39 	bl	8000220 <_Z12arrayComparePhS_>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d01e      	beq.n	80003f0 <main+0x190>
					  {
						 for(int i = 0; i<10; i++) //Blink thre times as heartbeat
 80003b2:	2300      	movs	r3, #0
 80003b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80003b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003b8:	2b09      	cmp	r3, #9
 80003ba:	dc19      	bgt.n	80003f0 <main+0x190>
							  {
								  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <main+0x1a0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	2102      	movs	r1, #2
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f8a1 	bl	800150a <HAL_GPIO_WritePin>
								  HAL_Delay(100);
 80003c8:	2064      	movs	r0, #100	; 0x64
 80003ca:	f000 fe11 	bl	8000ff0 <HAL_Delay>
								  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <main+0x1a0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	2102      	movs	r1, #2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 f898 	bl	800150a <HAL_GPIO_WritePin>
								  HAL_Delay(100);
 80003da:	2064      	movs	r0, #100	; 0x64
 80003dc:	f000 fe08 	bl	8000ff0 <HAL_Delay>
						 for(int i = 0; i<10; i++) //Blink thre times as heartbeat
 80003e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003e2:	3301      	adds	r3, #1
 80003e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80003e6:	e7e6      	b.n	80003b6 <main+0x156>
			  for(int i = 0; i<5; i++)
 80003e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003ea:	3301      	adds	r3, #1
 80003ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80003ee:	e798      	b.n	8000322 <main+0xc2>
							  }
					  }
					  break;
 80003f0:	46c0      	nop			; (mov r8, r8)
		 for(int j = 0; j < 5; j++)
 80003f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80003f4:	3301      	adds	r3, #1
 80003f6:	663b      	str	r3, [r7, #96]	; 0x60
 80003f8:	e77d      	b.n	80002f6 <main+0x96>
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	20000028 	.word	0x20000028
 8000400:	48000400 	.word	0x48000400
 8000404:	08003530 	.word	0x08003530
 8000408:	08003538 	.word	0x08003538
 800040c:	2000008c 	.word	0x2000008c
 8000410:	08003550 	.word	0x08003550

08000414 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b091      	sub	sp, #68	; 0x44
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2410      	movs	r4, #16
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2330      	movs	r3, #48	; 0x30
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 f86e 	bl	8003506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2310      	movs	r3, #16
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f003 f867 	bl	8003506 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	0021      	movs	r1, r4
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2202      	movs	r2, #2
 800043e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2201      	movs	r2, #1
 8000444:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2210      	movs	r2, #16
 800044a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	187b      	adds	r3, r7, r1
 8000454:	0018      	movs	r0, r3
 8000456:	f001 f89b 	bl	8001590 <HAL_RCC_OscConfig>
 800045a:	0003      	movs	r3, r0
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	4193      	sbcs	r3, r2
 8000460:	b2db      	uxtb	r3, r3
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 8000466:	f000 f945 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	003b      	movs	r3, r7
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000470:	003b      	movs	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	003b      	movs	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047c:	003b      	movs	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000482:	003b      	movs	r3, r7
 8000484:	2100      	movs	r1, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f001 fba0 	bl	8001bcc <HAL_RCC_ClockConfig>
 800048c:	0003      	movs	r3, r0
 800048e:	1e5a      	subs	r2, r3, #1
 8000490:	4193      	sbcs	r3, r2
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000498:	f000 f92c 	bl	80006f4 <Error_Handler>
  }
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b011      	add	sp, #68	; 0x44
 80004a2:	bd90      	pop	{r4, r7, pc}

080004a4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004aa:	4a1e      	ldr	r2, [pc, #120]	; (8000524 <_ZL12MX_SPI1_Initv+0x80>)
 80004ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004b0:	2282      	movs	r2, #130	; 0x82
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004be:	22e0      	movs	r2, #224	; 0xe0
 80004c0:	00d2      	lsls	r2, r2, #3
 80004c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004f2:	2207      	movs	r2, #7
 80004f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 80004fe:	2208      	movs	r2, #8
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_ZL12MX_SPI1_Initv+0x7c>)
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fcb5 	bl	8001e74 <HAL_SPI_Init>
 800050a:	0003      	movs	r3, r0
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	4193      	sbcs	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8000516:	f000 f8ed 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000028 	.word	0x20000028
 8000524:	40013000 	.word	0x40013000

08000528 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 800052e:	4a17      	ldr	r2, [pc, #92]	; (800058c <_ZL19MX_USART2_UART_Initv+0x64>)
 8000530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000534:	2296      	movs	r2, #150	; 0x96
 8000536:	0212      	lsls	r2, r2, #8
 8000538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_ZL19MX_USART2_UART_Initv+0x60>)
 800056c:	0018      	movs	r0, r3
 800056e:	f002 fba3 	bl	8002cb8 <HAL_UART_Init>
 8000572:	0003      	movs	r3, r0
 8000574:	1e5a      	subs	r2, r3, #1
 8000576:	4193      	sbcs	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 800057e:	f000 f8b9 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000008c 	.word	0x2000008c
 800058c:	40004400 	.word	0x40004400

08000590 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 ffb0 	bl	8003506 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b4d      	ldr	r3, [pc, #308]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	03db      	lsls	r3, r3, #15
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	02c9      	lsls	r1, r1, #11
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <_ZL12MX_GPIO_Initv+0x150>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	02db      	lsls	r3, r3, #11
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <_ZL12MX_GPIO_Initv+0x154>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 ff82 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDN_Pin|nSEL_Pin, GPIO_PIN_RESET);
 8000606:	2388      	movs	r3, #136	; 0x88
 8000608:	0199      	lsls	r1, r3, #6
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2200      	movs	r2, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f000 ff7a 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2203      	movs	r2, #3
 800061a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <_ZL12MX_GPIO_Initv+0x158>)
 8000620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2202      	movs	r2, #2
 8000626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000628:	193b      	adds	r3, r7, r4
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <_ZL12MX_GPIO_Initv+0x15c>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f000 fdde 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2202      	movs	r2, #2
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2202      	movs	r2, #2
 8000644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000646:	193a      	adds	r2, r7, r4
 8000648:	2390      	movs	r3, #144	; 0x90
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fdce 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin IRQ_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|IRQ_Pin|GPIO1_Pin;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <_ZL12MX_GPIO_Initv+0x160>)
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	193a      	adds	r2, r7, r4
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fdbe 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000674:	0021      	movs	r1, r4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2201      	movs	r2, #1
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800068e:	000c      	movs	r4, r1
 8000690:	187b      	adds	r3, r7, r1
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <_ZL12MX_GPIO_Initv+0x154>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f000 fdaa 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDN_Pin nSEL_Pin */
  GPIO_InitStruct.Pin = SDN_Pin|nSEL_Pin;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2288      	movs	r2, #136	; 0x88
 80006a2:	0192      	lsls	r2, r2, #6
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	2390      	movs	r3, #144	; 0x90
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fd95 	bl	80011f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2005      	movs	r0, #5
 80006cc:	f000 fd5e 	bl	800118c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 fd70 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b009      	add	sp, #36	; 0x24
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	10110000 	.word	0x10110000
 80006ec:	48001400 	.word	0x48001400
 80006f0:	00004410 	.word	0x00004410

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN6si446xC1EP12GPIO_TypeDefP19__SPI_HandleTypeDefttt>:
	GPIO0 = gpio0;
	GPIO1 = gpio1;
}

//Constructor without gpib pins
si446x::si446x(GPIO_TypeDef* pinBank, SPI_HandleTypeDef* spi, uint16_t ss,
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	001a      	movs	r2, r3
 800070c:	1cbb      	adds	r3, r7, #2
 800070e:	801a      	strh	r2, [r3, #0]
		uint16_t sdn, uint16_t irq) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	22fa      	movs	r2, #250	; 0xfa
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	839a      	strh	r2, [r3, #28]
	SPI = spi;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	60da      	str	r2, [r3, #12]
	PIN_BANK_SS = pinBank;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	619a      	str	r2, [r3, #24]
	PIN_BANK_SDN = pinBank;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	615a      	str	r2, [r3, #20]
	PIN_BANK_IRQ = pinBank;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	611a      	str	r2, [r3, #16]
	SS = ss;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	1cba      	adds	r2, r7, #2
 8000734:	8812      	ldrh	r2, [r2, #0]
 8000736:	801a      	strh	r2, [r3, #0]
	SDN = sdn;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2218      	movs	r2, #24
 800073c:	18ba      	adds	r2, r7, r2
 800073e:	8812      	ldrh	r2, [r2, #0]
 8000740:	805a      	strh	r2, [r3, #2]
	IRQ = irq;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	221c      	movs	r2, #28
 8000746:	18ba      	adds	r2, r7, r2
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	809a      	strh	r2, [r3, #4]
}
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}

08000756 <_ZN6si446x10sendPacketEPhth>:
	IRQ = irq;
}


//Send a package
void si446x::sendPacket(uint8_t* data, uint16_t len, uint8_t channel) {
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	0019      	movs	r1, r3
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	801a      	strh	r2, [r3, #0]
 8000766:	1d7b      	adds	r3, r7, #5
 8000768:	1c0a      	adds	r2, r1, #0
 800076a:	701a      	strb	r2, [r3, #0]

	//Clear Fifo
	clearFifoTXRX();
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f9d4 	bl	8000b1c <_ZN6si446x13clearFifoTXRXEv>
	//Ready State
	setReadyState();
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f96a 	bl	8000a50 <_ZN6si446x13setReadyStateEv>
	//Clear Interupts
	clearInterupts();
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f94a 	bl	8000a18 <_ZN6si446x14clearInteruptsEv>
	//Send to fifo
	sendDataToFifo(data, len);
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	68b9      	ldr	r1, [r7, #8]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f90d 	bl	80009ae <_ZN6si446x14sendDataToFifoEPhh>
	//Transmit data
	uint8_t setTxMode[] = {START_TX, channel, 0x80, 0x00};
 8000794:	2114      	movs	r1, #20
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2231      	movs	r2, #49	; 0x31
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	709a      	strb	r2, [r3, #2]
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	1d7a      	adds	r2, r7, #5
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	705a      	strb	r2, [r3, #1]
	sendCommand(setTxMode, sizeof(setTxMode));
 80007b0:	1879      	adds	r1, r7, r1
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2204      	movs	r2, #4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f864 	bl	8000884 <_ZN6si446x11sendCommandEPhh>
	HAL_Delay(500); //TODO Use nIRQ / GPIO Pin
 80007bc:	23fa      	movs	r3, #250	; 0xfa
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fc15 	bl	8000ff0 <HAL_Delay>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b006      	add	sp, #24
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_ZN6si446x7powerUpEv>:


//Power up and program MCU
void si446x::powerUp() {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PIN_BANK_SDN, SDN, GPIO_PIN_SET);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6958      	ldr	r0, [r3, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	2201      	movs	r2, #1
 80007e0:	0019      	movs	r1, r3
 80007e2:	f000 fe92 	bl	800150a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 fc02 	bl	8000ff0 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_BANK_SDN, SDN, GPIO_PIN_RESET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6958      	ldr	r0, [r3, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	885b      	ldrh	r3, [r3, #2]
 80007f4:	2200      	movs	r2, #0
 80007f6:	0019      	movs	r1, r3
 80007f8:	f000 fe87 	bl	800150a <HAL_GPIO_WritePin>
	waitUntilReady();
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f808 	bl	8000814 <_ZN6si446x14waitUntilReadyEv>
	writeConfig();
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f9d0 	bl	8000bac <_ZN6si446x11writeConfigEv>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN6si446x14waitUntilReadyEv>:

//Before every command check if CTS is asserted
void si446x::waitUntilReady() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint8_t comand = CTS;
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2244      	movs	r2, #68	; 0x44
 8000822:	701a      	strb	r2, [r3, #0]
	uint8_t testByte = 0x00;
 8000824:	230e      	movs	r3, #14
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	while (testByte != 0xff) {
 800082c:	230e      	movs	r3, #14
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d022      	beq.n	800087c <_ZN6si446x14waitUntilReadyEv+0x68>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6998      	ldr	r0, [r3, #24]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	2200      	movs	r2, #0
 8000840:	0019      	movs	r1, r3
 8000842:	f000 fe62 	bl	800150a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(SPI, &comand, 1, spiTimeout);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68d8      	ldr	r0, [r3, #12]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8b9b      	ldrh	r3, [r3, #28]
 800084e:	220f      	movs	r2, #15
 8000850:	18b9      	adds	r1, r7, r2
 8000852:	2201      	movs	r2, #1
 8000854:	f001 fba8 	bl	8001fa8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, &testByte, 1, spiTimeout);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68d8      	ldr	r0, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8b9b      	ldrh	r3, [r3, #28]
 8000860:	220e      	movs	r2, #14
 8000862:	18b9      	adds	r1, r7, r2
 8000864:	2201      	movs	r2, #1
 8000866:	f001 fd21 	bl	80022ac <HAL_SPI_Receive>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6998      	ldr	r0, [r3, #24]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	2201      	movs	r2, #1
 8000874:	0019      	movs	r1, r3
 8000876:	f000 fe48 	bl	800150a <HAL_GPIO_WritePin>
	while (testByte != 0xff) {
 800087a:	e7d7      	b.n	800082c <_ZN6si446x14waitUntilReadyEv+0x18>
	}
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN6si446x11sendCommandEPhh>:

//Send command and configuration bytes
void si446x::sendCommand(uint8_t* command, uint8_t lenCommand)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
	waitUntilReady();
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ffbd 	bl	8000814 <_ZN6si446x14waitUntilReadyEv>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6998      	ldr	r0, [r3, #24]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	0019      	movs	r1, r3
 80008a6:	f000 fe30 	bl	800150a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, command, lenCommand, spiTimeout);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	68d8      	ldr	r0, [r3, #12]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	8b9b      	ldrh	r3, [r3, #28]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	f001 fb75 	bl	8001fa8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6998      	ldr	r0, [r3, #24]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2201      	movs	r2, #1
 80008c8:	0019      	movs	r1, r3
 80008ca:	f000 fe1e 	bl	800150a <HAL_GPIO_WritePin>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN6si446x21sendComandGetResponseEPhhS0_h>:

//Send a command and config bytes, get replay stream in return
void si446x::sendComandGetResponse(uint8_t* command, uint8_t lenCommand, uint8_t* response, uint8_t lenResponse)
{
 80008d6:	b590      	push	{r4, r7, lr}
 80008d8:	b087      	sub	sp, #28
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	701a      	strb	r2, [r3, #0]
	uint8_t cts[] = {CTS};
 80008e6:	2314      	movs	r3, #20
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	701a      	strb	r2, [r3, #0]
	uint8_t ff[] = {0x00};
 80008ee:	2310      	movs	r3, #16
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6998      	ldr	r0, [r3, #24]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	0019      	movs	r1, r3
 8000902:	f000 fe02 	bl	800150a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, command, lenCommand, spiTimeout);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	68d8      	ldr	r0, [r3, #12]
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b29a      	uxth	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	8b9b      	ldrh	r3, [r3, #28]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	f001 fb47 	bl	8001fa8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6998      	ldr	r0, [r3, #24]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2201      	movs	r2, #1
 8000924:	0019      	movs	r1, r3
 8000926:	f000 fdf0 	bl	800150a <HAL_GPIO_WritePin>
	while(true)
	{
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6998      	ldr	r0, [r3, #24]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2200      	movs	r2, #0
 8000934:	0019      	movs	r1, r3
 8000936:	f000 fde8 	bl	800150a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(SPI, cts, 1, spiTimeout);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	68d8      	ldr	r0, [r3, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	8b9b      	ldrh	r3, [r3, #28]
 8000942:	2214      	movs	r2, #20
 8000944:	18b9      	adds	r1, r7, r2
 8000946:	2201      	movs	r2, #1
 8000948:	f001 fb2e 	bl	8001fa8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(SPI, ff, 1, spiTimeout);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	68d8      	ldr	r0, [r3, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	8b9b      	ldrh	r3, [r3, #28]
 8000954:	2410      	movs	r4, #16
 8000956:	1939      	adds	r1, r7, r4
 8000958:	2201      	movs	r2, #1
 800095a:	f001 fca7 	bl	80022ac <HAL_SPI_Receive>
		if(ff[0] == 0xff)
 800095e:	193b      	adds	r3, r7, r4
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d116      	bne.n	8000994 <_ZN6si446x21sendComandGetResponseEPhhS0_h+0xbe>
		{
			HAL_SPI_Receive(SPI, response, lenResponse, spiTimeout);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68d8      	ldr	r0, [r3, #12]
 800096a:	2320      	movs	r3, #32
 800096c:	2208      	movs	r2, #8
 800096e:	4694      	mov	ip, r2
 8000970:	44bc      	add	ip, r7
 8000972:	4463      	add	r3, ip
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	8b9b      	ldrh	r3, [r3, #28]
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	f001 fc95 	bl	80022ac <HAL_SPI_Receive>
			HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6998      	ldr	r0, [r3, #24]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	0019      	movs	r1, r3
 800098e:	f000 fdbc 	bl	800150a <HAL_GPIO_WritePin>
			break;
 8000992:	e008      	b.n	80009a6 <_ZN6si446x21sendComandGetResponseEPhhS0_h+0xd0>
		}
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6998      	ldr	r0, [r3, #24]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2201      	movs	r2, #1
 800099e:	0019      	movs	r1, r3
 80009a0:	f000 fdb3 	bl	800150a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 80009a4:	e7c1      	b.n	800092a <_ZN6si446x21sendComandGetResponseEPhhS0_h+0x54>
	}
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b007      	add	sp, #28
 80009ac:	bd90      	pop	{r4, r7, pc}

080009ae <_ZN6si446x14sendDataToFifoEPhh>:

//Send data to Rx FIFO
void si446x::sendDataToFifo(uint8_t *data, uint8_t len) {
 80009ae:	b590      	push	{r4, r7, lr}
 80009b0:	b087      	sub	sp, #28
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	701a      	strb	r2, [r3, #0]
	waitUntilReady();
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff28 	bl	8000814 <_ZN6si446x14waitUntilReadyEv>
	uint8_t comand[1] ={WRITE_TX_FIFO};
 80009c4:	2414      	movs	r4, #20
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2266      	movs	r2, #102	; 0x66
 80009ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6998      	ldr	r0, [r3, #24]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	0019      	movs	r1, r3
 80009d8:	f000 fd97 	bl	800150a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, comand, 1, spiTimeout);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	68d8      	ldr	r0, [r3, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	8b9b      	ldrh	r3, [r3, #28]
 80009e4:	1939      	adds	r1, r7, r4
 80009e6:	2201      	movs	r2, #1
 80009e8:	f001 fade 	bl	8001fa8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, data, len, spiTimeout);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	68d8      	ldr	r0, [r3, #12]
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	8b9b      	ldrh	r3, [r3, #28]
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	f001 fad4 	bl	8001fa8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6998      	ldr	r0, [r3, #24]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 fd7d 	bl	800150a <HAL_GPIO_WritePin>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b007      	add	sp, #28
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <_ZN6si446x14clearInteruptsEv>:

//Clear all pending interupts
void si446x::clearInterupts() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = {GET_INT_STATUS, 0x00, 0x00, 0x00};
 8000a20:	210c      	movs	r1, #12
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2220      	movs	r2, #32
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	705a      	strb	r2, [r3, #1]
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	709a      	strb	r2, [r3, #2]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	70da      	strb	r2, [r3, #3]
	sendCommand(comBuf, 4);
 8000a3a:	1879      	adds	r1, r7, r1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2204      	movs	r2, #4
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff1f 	bl	8000884 <_ZN6si446x11sendCommandEPhh>
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <_ZN6si446x13setReadyStateEv>:
	return 0xff;
}

//Will bring modem to ready state
void si446x::setReadyState()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = {CHANGE_STATE, 0x03};
 8000a58:	210c      	movs	r1, #12
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <_ZN6si446x13setReadyStateEv+0x28>)
 8000a5e:	8812      	ldrh	r2, [r2, #0]
 8000a60:	801a      	strh	r2, [r3, #0]
	sendCommand(comBuf, 2);
 8000a62:	1879      	adds	r1, r7, r1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2202      	movs	r2, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff0b 	bl	8000884 <_ZN6si446x11sendCommandEPhh>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	08003558 	.word	0x08003558

08000a7c <_ZN6si446x7startRXEh>:

//Inits. RX Mode. When one package is received, modem will fall back to ready mode
void si446x::startRX(uint8_t channel)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	000a      	movs	r2, r1
 8000a86:	1cfb      	adds	r3, r7, #3
 8000a88:	701a      	strb	r2, [r3, #0]
	//Ready State
	setReadyState();
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ffdf 	bl	8000a50 <_ZN6si446x13setReadyStateEv>
	//Clear Interupts
	clearInterupts();
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffbf 	bl	8000a18 <_ZN6si446x14clearInteruptsEv>
	//Clear FIFO TX /RX
	clearFifoTXRX();
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 f83d 	bl	8000b1c <_ZN6si446x13clearFifoTXRXEv>
	//Get Radio into RX Mode
	uint8_t commandRx[] = {START_RX, channel, 0x00, 0x00, 0x00, 0x00,0x03,0x00};
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2308      	movs	r3, #8
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fd29 	bl	8003506 <memset>
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2232      	movs	r2, #50	; 0x32
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	719a      	strb	r2, [r3, #6]
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	1cfa      	adds	r2, r7, #3
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	705a      	strb	r2, [r3, #1]
	sendCommand(commandRx, sizeof(commandRx));
 8000aca:	1879      	adds	r1, r7, r1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2208      	movs	r2, #8
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fed7 	bl	8000884 <_ZN6si446x11sendCommandEPhh>
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b005      	add	sp, #20
 8000adc:	bd90      	pop	{r4, r7, pc}

08000ade <_ZN6si446x13getRxFifoInfoEv>:

//Returns number of Bytes in RX FIFO
uint8_t si446x::getRxFifoInfo()
{
 8000ade:	b590      	push	{r4, r7, lr}
 8000ae0:	b087      	sub	sp, #28
 8000ae2:	af02      	add	r7, sp, #8
 8000ae4:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[2] = {0x15, 0x00};
 8000ae6:	210c      	movs	r1, #12
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2215      	movs	r2, #21
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	705a      	strb	r2, [r3, #1]
	uint8_t response[2] = {0x00};
 8000af4:	2408      	movs	r4, #8
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	801a      	strh	r2, [r3, #0]
	sendComandGetResponse(comBuf, 2, response, 2);
 8000afc:	193a      	adds	r2, r7, r4
 8000afe:	1879      	adds	r1, r7, r1
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	2302      	movs	r3, #2
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	0013      	movs	r3, r2
 8000b08:	2202      	movs	r2, #2
 8000b0a:	f7ff fee4 	bl	80008d6 <_ZN6si446x21sendComandGetResponseEPhhS0_h>
	return(response[0]);
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bd90      	pop	{r4, r7, pc}
	...

08000b1c <_ZN6si446x13clearFifoTXRXEv>:

//Clear RX and TX FIFO
void si446x::clearFifoTXRX() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t comBuf[] = { FIFO_INFO, 0x03};
 8000b24:	210c      	movs	r1, #12
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <_ZN6si446x13clearFifoTXRXEv+0x28>)
 8000b2a:	8812      	ldrh	r2, [r2, #0]
 8000b2c:	801a      	strh	r2, [r3, #0]
	sendCommand(comBuf, sizeof(comBuf));
 8000b2e:	1879      	adds	r1, r7, r1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2202      	movs	r2, #2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fea5 	bl	8000884 <_ZN6si446x11sendCommandEPhh>
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	0800355c 	.word	0x0800355c

08000b48 <_ZN6si446x9getPacketEPhh>:

//Gets Packet out of FIFO
void si446x::getPacket(uint8_t* rxData, uint8_t len)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
	uint8_t buf = READ_RX_FIFO;
 8000b56:	2417      	movs	r4, #23
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2277      	movs	r2, #119	; 0x77
 8000b5c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_RESET);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6998      	ldr	r0, [r3, #24]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	f000 fcce 	bl	800150a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI, &buf, 1, spiTimeout);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	68d8      	ldr	r0, [r3, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	8b9b      	ldrh	r3, [r3, #28]
 8000b76:	1939      	adds	r1, r7, r4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f001 fa15 	bl	8001fa8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, rxData, len, spiTimeout);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	68d8      	ldr	r0, [r3, #12]
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	8b9b      	ldrh	r3, [r3, #28]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	f001 fb8d 	bl	80022ac <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PIN_BANK_SS, SS, GPIO_PIN_SET);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6998      	ldr	r0, [r3, #24]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	f000 fcb4 	bl	800150a <HAL_GPIO_WritePin>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b007      	add	sp, #28
 8000ba8:	bd90      	pop	{r4, r7, pc}
	...

08000bac <_ZN6si446x11writeConfigEv>:


//Writes the configs from the radio_config_Si4463.h to the radio
//TODO include patch?
void si446x::writeConfig() {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	4c45      	ldr	r4, [pc, #276]	; (8000cc4 <_ZN6si446x11writeConfigEv+0x118>)
 8000bb0:	44a5      	add	sp, r4
 8000bb2:	af02      	add	r7, sp, #8
 8000bb4:	6078      	str	r0, [r7, #4]
	uint8_t buf[1]= {0x00};
 8000bb6:	2386      	movs	r3, #134	; 0x86
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t configArray[] = RADIO_CONFIGURATION_DATA_ARRAY;
 8000bc0:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000bc2:	228a      	movs	r2, #138	; 0x8a
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	18ba      	adds	r2, r7, r2
 8000bc8:	18d2      	adds	r2, r2, r3
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <_ZN6si446x11writeConfigEv+0x120>)
 8000bcc:	0010      	movs	r0, r2
 8000bce:	0019      	movs	r1, r3
 8000bd0:	238a      	movs	r3, #138	; 0x8a
 8000bd2:	33ff      	adds	r3, #255	; 0xff
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	f002 fc8d 	bl	80034f4 <memcpy>
	uint8_t len = configArray[0];
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <_ZN6si446x11writeConfigEv+0x124>)
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	4a3a      	ldr	r2, [pc, #232]	; (8000cc8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000be0:	218a      	movs	r1, #138	; 0x8a
 8000be2:	0089      	lsls	r1, r1, #2
 8000be4:	468c      	mov	ip, r1
 8000be6:	44bc      	add	ip, r7
 8000be8:	4462      	add	r2, ip
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	701a      	strb	r2, [r3, #0]
	int arrCounter = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2288      	movs	r2, #136	; 0x88
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	6013      	str	r3, [r2, #0]
	uint8_t configBuffer[128] = { 0x00 };
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <_ZN6si446x11writeConfigEv+0x128>)
 8000bfa:	228a      	movs	r2, #138	; 0x8a
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4694      	mov	ip, r2
 8000c00:	44bc      	add	ip, r7
 8000c02:	4463      	add	r3, ip
 8000c04:	0018      	movs	r0, r3
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f002 fc7b 	bl	8003506 <memset>
	while (len != 0) {
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <_ZN6si446x11writeConfigEv+0x124>)
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d04e      	beq.n	8000cb8 <_ZN6si446x11writeConfigEv+0x10c>
		for (int i = 0; i < len; i++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2287      	movs	r2, #135	; 0x87
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	18ba      	adds	r2, r7, r2
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <_ZN6si446x11writeConfigEv+0x124>)
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2287      	movs	r2, #135	; 0x87
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	18ba      	adds	r2, r7, r2
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	da1f      	bge.n	8000c76 <_ZN6si446x11writeConfigEv+0xca>
			configBuffer[i] = configArray[arrCounter];
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000c38:	248a      	movs	r4, #138	; 0x8a
 8000c3a:	00a4      	lsls	r4, r4, #2
 8000c3c:	193a      	adds	r2, r7, r4
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	2088      	movs	r0, #136	; 0x88
 8000c42:	0080      	lsls	r0, r0, #2
 8000c44:	183b      	adds	r3, r7, r0
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	7819      	ldrb	r1, [r3, #0]
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <_ZN6si446x11writeConfigEv+0x128>)
 8000c4e:	193a      	adds	r2, r7, r4
 8000c50:	18d2      	adds	r2, r2, r3
 8000c52:	2487      	movs	r4, #135	; 0x87
 8000c54:	00a4      	lsls	r4, r4, #2
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	1c0a      	adds	r2, r1, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			arrCounter++;
 8000c60:	183b      	adds	r3, r7, r0
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	183a      	adds	r2, r7, r0
 8000c68:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < len; i++) {
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	e7d6      	b.n	8000c24 <_ZN6si446x11writeConfigEv+0x78>
		}
		sendComandGetResponse(configBuffer, len, buf, 0);
 8000c76:	2386      	movs	r3, #134	; 0x86
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	18fc      	adds	r4, r7, r3
 8000c7c:	4d14      	ldr	r5, [pc, #80]	; (8000cd0 <_ZN6si446x11writeConfigEv+0x124>)
 8000c7e:	197b      	adds	r3, r7, r5
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	230c      	movs	r3, #12
 8000c84:	18f9      	adds	r1, r7, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	f7ff fe22 	bl	80008d6 <_ZN6si446x21sendComandGetResponseEPhhS0_h>
		//printHexArray(configBuffer, len); //DEBUG OUTPUT
		len = configArray[arrCounter];
 8000c92:	197b      	adds	r3, r7, r5
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <_ZN6si446x11writeConfigEv+0x11c>)
 8000c96:	218a      	movs	r1, #138	; 0x8a
 8000c98:	0089      	lsls	r1, r1, #2
 8000c9a:	1879      	adds	r1, r7, r1
 8000c9c:	1889      	adds	r1, r1, r2
 8000c9e:	2088      	movs	r0, #136	; 0x88
 8000ca0:	0080      	lsls	r0, r0, #2
 8000ca2:	183a      	adds	r2, r7, r0
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	188a      	adds	r2, r1, r2
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]
		arrCounter++;
 8000cac:	183b      	adds	r3, r7, r0
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	183a      	adds	r2, r7, r0
 8000cb4:	6013      	str	r3, [r2, #0]
	while (len != 0) {
 8000cb6:	e7ab      	b.n	8000c10 <_ZN6si446x11writeConfigEv+0x64>
	}
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	238a      	movs	r3, #138	; 0x8a
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	449d      	add	sp, r3
 8000cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc4:	fffffdd0 	.word	0xfffffdd0
 8000cc8:	fffffe64 	.word	0xfffffe64
 8000ccc:	08003560 	.word	0x08003560
 8000cd0:	00000227 	.word	0x00000227
 8000cd4:	fffffde4 	.word	0xfffffde4

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	619a      	str	r2, [r3, #24]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_MspInit+0x44>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0549      	lsls	r1, r1, #21
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_MspInit+0x44>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	055b      	lsls	r3, r3, #21
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	2314      	movs	r3, #20
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2314      	movs	r3, #20
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f002 fbe7 	bl	8003506 <memset>
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_SPI_MspInit+0x90>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d132      	bne.n	8000da8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	0149      	lsls	r1, r1, #5
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	619a      	str	r2, [r3, #24]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	015b      	lsls	r3, r3, #5
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x94>)
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	2114      	movs	r1, #20
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	22e0      	movs	r2, #224	; 0xe0
 8000d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2203      	movs	r2, #3
 8000d92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	187a      	adds	r2, r7, r1
 8000d9c:	2390      	movs	r3, #144	; 0x90
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 fa24 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b00a      	add	sp, #40	; 0x28
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	2314      	movs	r3, #20
 8000dc8:	001a      	movs	r2, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f002 fb9b 	bl	8003506 <memset>
  if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d132      	bne.n	8000e40 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000ddc:	69da      	ldr	r2, [r3, #28]
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	0289      	lsls	r1, r1, #10
 8000de4:	430a      	orrs	r2, r1
 8000de6:	61da      	str	r2, [r3, #28]
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000dea:	69da      	ldr	r2, [r3, #28]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	029b      	lsls	r3, r3, #10
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0289      	lsls	r1, r1, #10
 8000e00:	430a      	orrs	r2, r1
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e12:	2114      	movs	r1, #20
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	187a      	adds	r2, r7, r1
 8000e34:	2390      	movs	r3, #144	; 0x90
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f9d8 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b00a      	add	sp, #40	; 0x28
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f89e 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fb5c 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fb59 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000eaa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000eac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <LoopForever+0xa>)
    CMP R1, R2
 8000eb0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000eb2:	d105      	bne.n	8000ec0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000eb6:	4913      	ldr	r1, [pc, #76]	; (8000f04 <LoopForever+0x12>)
    STR R1, [R0]
 8000eb8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000eba:	4813      	ldr	r0, [pc, #76]	; (8000f08 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ebc:	4913      	ldr	r1, [pc, #76]	; (8000f0c <LoopForever+0x1a>)
    STR R1, [R0]
 8000ebe:	6001      	str	r1, [r0, #0]

08000ec0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ec2:	4914      	ldr	r1, [pc, #80]	; (8000f14 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <LoopForever+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ed8:	4c11      	ldr	r4, [pc, #68]	; (8000f20 <LoopForever+0x2e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee6:	f7ff ffd7 	bl	8000e98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000eea:	f002 fadf 	bl	80034ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff f9b7 	bl	8000260 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ef8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000efc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f00:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f04:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f08:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f0c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f18:	0800372c 	.word	0x0800372c
  ldr r2, =_sbss
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f20:	20000110 	.word	0x20000110

08000f24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_IRQHandler>
	...

08000f28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_Init+0x24>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_Init+0x24>)
 8000f32:	2110      	movs	r1, #16
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f809 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3e:	f7ff fecb 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x5c>)
 8000f5a:	681c      	ldr	r4, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0019      	movs	r1, r3
 8000f62:	23fa      	movs	r3, #250	; 0xfa
 8000f64:	0098      	lsls	r0, r3, #2
 8000f66:	f7ff f8cf 	bl	8000108 <__udivsi3>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f7ff f8ca 	bl	8000108 <__udivsi3>
 8000f74:	0003      	movs	r3, r0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f92d 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e00f      	b.n	8000fa4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d80b      	bhi.n	8000fa2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f8fa 	bl	800118c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_InitTick+0x64>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	18d2      	adds	r2, r2, r3
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	2000010c 	.word	0x2000010c

08000fdc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	2000010c 	.word	0x2000010c

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	001a      	movs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	189b      	adds	r3, r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	0002      	movs	r2, r0
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b7f      	cmp	r3, #127	; 0x7f
 8001046:	d809      	bhi.n	800105c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	231f      	movs	r3, #31
 8001050:	401a      	ands	r2, r3
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_EnableIRQ+0x30>)
 8001054:	2101      	movs	r1, #1
 8001056:	4091      	lsls	r1, r2
 8001058:	000a      	movs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
  }
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	0002      	movs	r2, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b7f      	cmp	r3, #127	; 0x7f
 800107c:	d828      	bhi.n	80010d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107e:	4a2f      	ldr	r2, [pc, #188]	; (800113c <__NVIC_SetPriority+0xd4>)
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	33c0      	adds	r3, #192	; 0xc0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	589b      	ldr	r3, [r3, r2]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	481f      	ldr	r0, [pc, #124]	; (800113c <__NVIC_SetPriority+0xd4>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	430a      	orrs	r2, r1
 80010c8:	33c0      	adds	r3, #192	; 0xc0
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ce:	e031      	b.n	8001134 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <__NVIC_SetPriority+0xd8>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0019      	movs	r1, r3
 80010d8:	230f      	movs	r3, #15
 80010da:	400b      	ands	r3, r1
 80010dc:	3b08      	subs	r3, #8
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3306      	adds	r3, #6
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	3304      	adds	r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	400a      	ands	r2, r1
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	4091      	lsls	r1, r2
 80010fa:	000a      	movs	r2, r1
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	401a      	ands	r2, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	2303      	movs	r3, #3
 8001112:	4003      	ands	r3, r0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <__NVIC_SetPriority+0xd8>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	001c      	movs	r4, r3
 8001120:	230f      	movs	r3, #15
 8001122:	4023      	ands	r3, r4
 8001124:	3b08      	subs	r3, #8
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	430a      	orrs	r2, r1
 800112a:	3306      	adds	r3, #6
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	18c3      	adds	r3, r0, r3
 8001130:	3304      	adds	r3, #4
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b003      	add	sp, #12
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <SysTick_Config+0x40>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e010      	b.n	800117c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <SysTick_Config+0x44>)
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	3a01      	subs	r2, #1
 8001160:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	2301      	movs	r3, #1
 8001164:	425b      	negs	r3, r3
 8001166:	2103      	movs	r1, #3
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff7d 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SysTick_Config+0x44>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x44>)
 8001176:	2207      	movs	r2, #7
 8001178:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117a:	2300      	movs	r3, #0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	00ffffff 	.word	0x00ffffff
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	210f      	movs	r1, #15
 8001198:	187b      	adds	r3, r7, r1
 800119a:	1c02      	adds	r2, r0, #0
 800119c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b004      	add	sp, #16
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	0002      	movs	r2, r0
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff33 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ffaf 	bl	8001144 <SysTick_Config>
 80011e6:	0003      	movs	r3, r0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e14f      	b.n	80014a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4091      	lsls	r1, r2
 800120a:	000a      	movs	r2, r1
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d100      	bne.n	8001218 <HAL_GPIO_Init+0x28>
 8001216:	e140      	b.n	800149a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x38>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b12      	cmp	r3, #18
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	58d3      	ldr	r3, [r2, r3]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2207      	movs	r2, #7
 800123a:	4013      	ands	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2107      	movs	r1, #7
 8001254:	400b      	ands	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2203      	movs	r2, #3
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d00b      	beq.n	80012c4 <HAL_GPIO_Init+0xd4>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d007      	beq.n	80012c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b8:	2b11      	cmp	r3, #17
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b12      	cmp	r3, #18
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	2201      	movs	r2, #1
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	055b      	lsls	r3, r3, #21
 800135e:	4013      	ands	r3, r2
 8001360:	d100      	bne.n	8001364 <HAL_GPIO_Init+0x174>
 8001362:	e09a      	b.n	800149a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_GPIO_Init+0x2c8>)
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	619a      	str	r2, [r3, #24]
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x2cc>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	589b      	ldr	r3, [r3, r2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2203      	movs	r2, #3
 800138e:	4013      	ands	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	2390      	movs	r3, #144	; 0x90
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1e2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <HAL_GPIO_Init+0x2d0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1de>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a43      	ldr	r2, [pc, #268]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1da>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <HAL_GPIO_Init+0x2d8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1d6>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013d2:	2300      	movs	r3, #0
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	2103      	movs	r1, #3
 80013d8:	400a      	ands	r2, r1
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_GPIO_Init+0x2cc>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	035b      	lsls	r3, r3, #13
 800145e:	4013      	ands	r3, r2
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	4013      	ands	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	1e13      	subs	r3, r2, #0
 80014aa:	d000      	beq.n	80014ae <HAL_GPIO_Init+0x2be>
 80014ac:	e6a8      	b.n	8001200 <HAL_GPIO_Init+0x10>
  } 
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b006      	add	sp, #24
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000c00 	.word	0x48000c00
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	000a      	movs	r2, r1
 80014da:	1cbb      	adds	r3, r7, #2
 80014dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	1cba      	adds	r2, r7, #2
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	4013      	ands	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014ea:	230f      	movs	r3, #15
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
  }
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	0008      	movs	r0, r1
 8001514:	0011      	movs	r1, r2
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	1c02      	adds	r2, r0, #0
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	1c7b      	adds	r3, r7, #1
 800151e:	1c0a      	adds	r2, r1, #0
 8001520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001522:	1c7b      	adds	r3, r7, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001532:	e003      	b.n	800153c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	1dba      	adds	r2, r7, #6
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	4013      	ands	r3, r2
 800155a:	d008      	beq.n	800156e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800155e:	1dba      	adds	r2, r7, #6
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f000 f807 	bl	800157c <HAL_GPIO_EXTI_Callback>
  }
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	0002      	movs	r2, r0
 8001584:	1dbb      	adds	r3, r7, #6
 8001586:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e305      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x1e>
 80015ac:	e08d      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015ae:	4bc5      	ldr	r3, [pc, #788]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	220c      	movs	r2, #12
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d00e      	beq.n	80015d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ba:	4bc2      	ldr	r3, [pc, #776]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	220c      	movs	r2, #12
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x64>
 80015c6:	4bbf      	ldr	r3, [pc, #764]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	401a      	ands	r2, r3
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4bba      	ldr	r3, [pc, #744]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x56>
 80015e4:	e070      	b.n	80016c8 <HAL_RCC_OscConfig+0x138>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d000      	beq.n	80015f0 <HAL_RCC_OscConfig+0x60>
 80015ee:	e06b      	b.n	80016c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2dc      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x7c>
 80015fc:	4bb1      	ldr	r3, [pc, #708]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4bb0      	ldr	r3, [pc, #704]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0249      	lsls	r1, r1, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02f      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x9e>
 8001614:	4bab      	ldr	r3, [pc, #684]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800161a:	49ab      	ldr	r1, [pc, #684]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4ba8      	ldr	r3, [pc, #672]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4ba7      	ldr	r3, [pc, #668]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001626:	49a9      	ldr	r1, [pc, #676]	; (80018cc <HAL_RCC_OscConfig+0x33c>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e01e      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0xc4>
 8001636:	4ba3      	ldr	r3, [pc, #652]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4ba2      	ldr	r3, [pc, #648]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	02c9      	lsls	r1, r1, #11
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	4b9f      	ldr	r3, [pc, #636]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xdc>
 8001654:	4b9b      	ldr	r3, [pc, #620]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b9a      	ldr	r3, [pc, #616]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800165a:	499b      	ldr	r1, [pc, #620]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4b98      	ldr	r3, [pc, #608]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b97      	ldr	r3, [pc, #604]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001666:	4999      	ldr	r1, [pc, #612]	; (80018cc <HAL_RCC_OscConfig+0x33c>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d014      	beq.n	800169e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcb2 	bl	8000fdc <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff fcad 	bl	8000fdc <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e28e      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001690:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0xee>
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fc9d 	bl	8000fdc <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fc98 	bl	8000fdc <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e279      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b82      	ldr	r3, [pc, #520]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x118>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x146>
 80016d4:	e06c      	b.n	80017b0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016d6:	4b7b      	ldr	r3, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	220c      	movs	r2, #12
 80016dc:	4013      	ands	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016e0:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	220c      	movs	r2, #12
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d11f      	bne.n	800172c <HAL_RCC_OscConfig+0x19c>
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	23c0      	movs	r3, #192	; 0xc0
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	401a      	ands	r2, r3
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x184>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e24c      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	22f8      	movs	r2, #248	; 0xf8
 800171a:	4393      	bics	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00da      	lsls	r2, r3, #3
 8001724:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e041      	b.n	80017b0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d024      	beq.n	800177e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800173a:	2101      	movs	r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fc4c 	bl	8000fdc <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc47 	bl	8000fdc <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e228      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d0f1      	beq.n	800174a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	22f8      	movs	r2, #248	; 0xf8
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00da      	lsls	r2, r3, #3
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001784:	2101      	movs	r1, #1
 8001786:	438a      	bics	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fc27 	bl	8000fdc <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fc22 	bl	8000fdc <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e203      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d1f1      	bne.n	8001794 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2208      	movs	r2, #8
 80017b6:	4013      	ands	r3, r2
 80017b8:	d036      	beq.n	8001828 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d019      	beq.n	80017f6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fc05 	bl	8000fdc <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc00 	bl	8000fdc <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1e1      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f1      	beq.n	80017d8 <HAL_RCC_OscConfig+0x248>
 80017f4:	e018      	b.n	8001828 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	438a      	bics	r2, r1
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fbeb 	bl	8000fdc <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fbe6 	bl	8000fdc <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1c7      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d1f1      	bne.n	800180c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x2a4>
 8001832:	e0b5      	b.n	80019a0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001834:	231f      	movs	r3, #31
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	055b      	lsls	r3, r3, #21
 8001844:	4013      	ands	r3, r2
 8001846:	d111      	bne.n	800186c <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	0549      	lsls	r1, r1, #21
 8001852:	430a      	orrs	r2, r1
 8001854:	61da      	str	r2, [r3, #28]
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	055b      	lsls	r3, r3, #21
 800185e:	4013      	ands	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001864:	231f      	movs	r3, #31
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_RCC_OscConfig+0x340>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d11a      	bne.n	80018ae <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x340>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_OscConfig+0x340>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0049      	lsls	r1, r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fba9 	bl	8000fdc <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7ff fba4 	bl	8000fdc <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e185      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x340>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10e      	bne.n	80018d4 <HAL_RCC_OscConfig+0x344>
 80018b6:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	e035      	b.n	8001930 <HAL_RCC_OscConfig+0x3a0>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	fffeffff 	.word	0xfffeffff
 80018cc:	fffbffff 	.word	0xfffbffff
 80018d0:	40007000 	.word	0x40007000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x366>
 80018dc:	4bb6      	ldr	r3, [pc, #728]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4bb5      	ldr	r3, [pc, #724]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
 80018e8:	4bb3      	ldr	r3, [pc, #716]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	4bb2      	ldr	r3, [pc, #712]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	438a      	bics	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x3a0>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x388>
 80018fe:	4bae      	ldr	r3, [pc, #696]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	4bad      	ldr	r3, [pc, #692]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001904:	2104      	movs	r1, #4
 8001906:	430a      	orrs	r2, r1
 8001908:	621a      	str	r2, [r3, #32]
 800190a:	4bab      	ldr	r3, [pc, #684]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4baa      	ldr	r3, [pc, #680]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	621a      	str	r2, [r3, #32]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x3a0>
 8001918:	4ba7      	ldr	r3, [pc, #668]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	4ba6      	ldr	r3, [pc, #664]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	621a      	str	r2, [r3, #32]
 8001924:	4ba4      	ldr	r3, [pc, #656]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	4ba3      	ldr	r3, [pc, #652]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 800192a:	2104      	movs	r1, #4
 800192c:	438a      	bics	r2, r1
 800192e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d014      	beq.n	8001962 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb50 	bl	8000fdc <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb4b 	bl	8000fdc <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a9b      	ldr	r2, [pc, #620]	; (8001bbc <HAL_RCC_OscConfig+0x62c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e12b      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b98      	ldr	r3, [pc, #608]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x3b2>
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff fb3b 	bl	8000fdc <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	e009      	b.n	8001980 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff fb36 	bl	8000fdc <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a91      	ldr	r2, [pc, #580]	; (8001bbc <HAL_RCC_OscConfig+0x62c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e116      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b8d      	ldr	r3, [pc, #564]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198a:	231f      	movs	r3, #31
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 800199a:	4989      	ldr	r1, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x630>)
 800199c:	400a      	ands	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2210      	movs	r2, #16
 80019a6:	4013      	ands	r3, r2
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d12a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b6:	4b80      	ldr	r3, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019b8:	2104      	movs	r1, #4
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019be:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb07 	bl	8000fdc <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019d4:	f7ff fb02 	bl	8000fdc <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0e3      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019e6:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f1      	beq.n	80019d4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f0:	4b71      	ldr	r3, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	22f8      	movs	r2, #248	; 0xf8
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
 8001a06:	e034      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	3305      	adds	r3, #5
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a14:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	438a      	bics	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	22f8      	movs	r2, #248	; 0xf8
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	00da      	lsls	r2, r3, #3
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
 8001a32:	e01e      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a40:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fac6 	bl	8000fdc <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a56:	f7ff fac1 	bl	8000fdc <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0a2      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f1      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
 8001a7a:	e097      	b.n	8001bac <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	220c      	movs	r2, #12
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4fa>
 8001a88:	e06b      	b.n	8001b62 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d14c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a98:	494a      	ldr	r1, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x634>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa9d 	bl	8000fdc <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa98 	bl	8000fdc <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e079      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	220f      	movs	r2, #15
 8001acc:	4393      	bics	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <HAL_RCC_OscConfig+0x638>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	431a      	orrs	r2, r3
 8001aee:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0449      	lsls	r1, r1, #17
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fa6b 	bl	8000fdc <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fa66 	bl	8000fdc <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e047      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	049b      	lsls	r3, r3, #18
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x57c>
 8001b2a:	e03f      	b.n	8001bac <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b32:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x634>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fa50 	bl	8000fdc <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fa4b 	bl	8000fdc <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e02c      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5b2>
 8001b60:	e024      	b.n	8001bac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01f      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	401a      	ands	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d10e      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	23f0      	movs	r3, #240	; 0xf0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b008      	add	sp, #32
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	00001388 	.word	0x00001388
 8001bc0:	efffffff 	.word	0xefffffff
 8001bc4:	feffffff 	.word	0xfeffffff
 8001bc8:	ffc27fff 	.word	0xffc27fff

08001bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b3      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d911      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d015      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2204      	movs	r2, #4
 8001c22:	4013      	ands	r3, r2
 8001c24:	d006      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c26:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	21e0      	movs	r1, #224	; 0xe0
 8001c2e:	00c9      	lsls	r1, r1, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	22f0      	movs	r2, #240	; 0xf0
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d040      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	d114      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	049b      	lsls	r3, r3, #18
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e062      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e05b      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f99a 	bl	8000fdc <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f995 	bl	8000fdc <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_RCC_ClockConfig+0x18c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e042      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	401a      	ands	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1ec      	bne.n	8001cae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d211      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4393      	bics	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x184>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e020      	b.n	8001d48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_RCC_ClockConfig+0x190>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d24:	f000 f820 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d28:	0001      	movs	r1, r0
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x188>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x194>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	000a      	movs	r2, r1
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x198>)
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff f905 	bl	8000f50 <HAL_InitTick>
  
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	00001388 	.word	0x00001388
 8001d5c:	fffff8ff 	.word	0xfffff8ff
 8001d60:	0800370c 	.word	0x0800370c
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08f      	sub	sp, #60	; 0x3c
 8001d6c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d6e:	2314      	movs	r3, #20
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d76:	c313      	stmia	r3!, {r0, r1, r4}
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d82:	c313      	stmia	r3!, {r0, r1, r4}
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	220c      	movs	r2, #12
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d002      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d003      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x50>
 8001db0:	e02f      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db6:	e02f      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2214      	movs	r2, #20
 8001dc2:	18ba      	adds	r2, r7, r2
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	220f      	movs	r2, #15
 8001dce:	4013      	ands	r3, r2
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	401a      	ands	r2, r3
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	025b      	lsls	r3, r3, #9
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de8:	4811      	ldr	r0, [pc, #68]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dea:	f7fe f98d 	bl	8000108 <__udivsi3>
 8001dee:	0003      	movs	r3, r0
 8001df0:	001a      	movs	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	4353      	muls	r3, r2
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dfe:	f7fe f983 	bl	8000108 <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	001a      	movs	r2, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	4353      	muls	r3, r2
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e10:	e002      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b00f      	add	sp, #60	; 0x3c
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	080036ec 	.word	0x080036ec
 8001e28:	080036fc 	.word	0x080036fc
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	0001      	movs	r1, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	40d9      	lsrs	r1, r3
 8001e62:	000b      	movs	r3, r1
}    
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	0800371c 	.word	0x0800371c

08001e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08a      	b.n	8001f9c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	225d      	movs	r2, #93	; 0x5d
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	225c      	movs	r2, #92	; 0x5c
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe ff3c 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	225d      	movs	r2, #93	; 0x5d
 8001eac:	2102      	movs	r1, #2
 8001eae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	23e0      	movs	r3, #224	; 0xe0
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d902      	bls.n	8001ed2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e002      	b.n	8001ed8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	23f0      	movs	r3, #240	; 0xf0
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d008      	beq.n	8001ef6 <HAL_SPI_Init+0x82>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	23e0      	movs	r3, #224	; 0xe0
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	23e0      	movs	r3, #224	; 0xe0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d903      	bls.n	8001f12 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f10:	e002      	b.n	8001f18 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6999      	ldr	r1, [r3, #24]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	400b      	ands	r3, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	0011      	movs	r1, r2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	0011      	movs	r1, r2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <HAL_SPI_Init+0x130>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	225d      	movs	r2, #93	; 0x5d
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	fffff7ff 	.word	0xfffff7ff

08001fa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	1dbb      	adds	r3, r7, #6
 8001fb6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb8:	231f      	movs	r3, #31
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	225c      	movs	r2, #92	; 0x5c
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_SPI_Transmit+0x26>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e169      	b.n	80022a2 <HAL_SPI_Transmit+0x2fa>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	225c      	movs	r2, #92	; 0x5c
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fd6:	f7ff f801 	bl	8000fdc <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fde:	2316      	movs	r3, #22
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	1dba      	adds	r2, r7, #6
 8001fe4:	8812      	ldrh	r2, [r2, #0]
 8001fe6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	225d      	movs	r2, #93	; 0x5d
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d004      	beq.n	8001ffe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ff4:	231f      	movs	r3, #31
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ffc:	e146      	b.n	800228c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_SPI_Transmit+0x64>
 8002004:	1dbb      	adds	r3, r7, #6
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800200c:	231f      	movs	r3, #31
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    goto error;
 8002014:	e13a      	b.n	800228c <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	225d      	movs	r2, #93	; 0x5d
 800201a:	2103      	movs	r1, #3
 800201c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1dba      	adds	r2, r7, #6
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1dba      	adds	r2, r7, #6
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2244      	movs	r2, #68	; 0x44
 8002044:	2100      	movs	r1, #0
 8002046:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2246      	movs	r2, #70	; 0x46
 800204c:	2100      	movs	r1, #0
 800204e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	429a      	cmp	r2, r3
 8002066:	d108      	bne.n	800207a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	01c9      	lsls	r1, r1, #7
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	4013      	ands	r3, r2
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d007      	beq.n	8002098 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	23e0      	movs	r3, #224	; 0xe0
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d94e      	bls.n	8002142 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_SPI_Transmit+0x10e>
 80020ac:	2316      	movs	r3, #22
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d13f      	bne.n	8002136 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	1c9a      	adds	r2, r3, #2
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020da:	e02c      	b.n	8002136 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d112      	bne.n	8002110 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	1c9a      	adds	r2, r3, #2
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800210e:	e012      	b.n	8002136 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002110:	f7fe ff64 	bl	8000fdc <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d802      	bhi.n	8002126 <HAL_SPI_Transmit+0x17e>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_SPI_Transmit+0x184>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800212c:	231f      	movs	r3, #31
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2203      	movs	r2, #3
 8002132:	701a      	strb	r2, [r3, #0]
          goto error;
 8002134:	e0aa      	b.n	800228c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1cd      	bne.n	80020dc <HAL_SPI_Transmit+0x134>
 8002140:	e080      	b.n	8002244 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_SPI_Transmit+0x1ae>
 800214a:	2316      	movs	r3, #22
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d000      	beq.n	8002156 <HAL_SPI_Transmit+0x1ae>
 8002154:	e071      	b.n	800223a <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d912      	bls.n	8002186 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	881a      	ldrh	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	1c9a      	adds	r2, r3, #2
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b02      	subs	r3, #2
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002184:	e059      	b.n	800223a <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80021ac:	e045      	b.n	800223a <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d12b      	bne.n	8002214 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d912      	bls.n	80021ec <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b02      	subs	r3, #2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ea:	e026      	b.n	800223a <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	330c      	adds	r3, #12
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002212:	e012      	b.n	800223a <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002214:	f7fe fee2 	bl	8000fdc <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d802      	bhi.n	800222a <HAL_SPI_Transmit+0x282>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_SPI_Transmit+0x288>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002230:	231f      	movs	r3, #31
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2203      	movs	r2, #3
 8002236:	701a      	strb	r2, [r3, #0]
          goto error;
 8002238:	e028      	b.n	800228c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1b4      	bne.n	80021ae <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fcee 	bl	8002c2c <SPI_EndRxTxTransaction>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d002      	beq.n	800225a <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10a      	bne.n	8002278 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002280:	231f      	movs	r3, #31
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e000      	b.n	800228c <HAL_SPI_Transmit+0x2e4>
  }

error:
 800228a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	225d      	movs	r2, #93	; 0x5d
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	225c      	movs	r2, #92	; 0x5c
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800229c:	231f      	movs	r3, #31
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b008      	add	sp, #32
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022bc:	2317      	movs	r3, #23
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	2382      	movs	r3, #130	; 0x82
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d113      	bne.n	80022f8 <HAL_SPI_Receive+0x4c>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	225d      	movs	r2, #93	; 0x5d
 80022dc:	2104      	movs	r1, #4
 80022de:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	881c      	ldrh	r4, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0023      	movs	r3, r4
 80022f0:	f000 f920 	bl	8002534 <HAL_SPI_TransmitReceive>
 80022f4:	0003      	movs	r3, r0
 80022f6:	e114      	b.n	8002522 <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	225c      	movs	r2, #92	; 0x5c
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Receive+0x5a>
 8002302:	2302      	movs	r3, #2
 8002304:	e10d      	b.n	8002522 <HAL_SPI_Receive+0x276>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	225c      	movs	r2, #92	; 0x5c
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230e:	f7fe fe65 	bl	8000fdc <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	225d      	movs	r2, #93	; 0x5d
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d004      	beq.n	800232c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002322:	2317      	movs	r3, #23
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2202      	movs	r2, #2
 8002328:	701a      	strb	r2, [r3, #0]
    goto error;
 800232a:	e0ef      	b.n	800250c <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_SPI_Receive+0x8e>
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800233a:	2317      	movs	r3, #23
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    goto error;
 8002342:	e0e3      	b.n	800250c <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	225d      	movs	r2, #93	; 0x5d
 8002348:	2104      	movs	r1, #4
 800234a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1dba      	adds	r2, r7, #6
 800235c:	2144      	movs	r1, #68	; 0x44
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1dba      	adds	r2, r7, #6
 8002366:	2146      	movs	r1, #70	; 0x46
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	23e0      	movs	r3, #224	; 0xe0
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	429a      	cmp	r2, r3
 8002394:	d908      	bls.n	80023a8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4962      	ldr	r1, [pc, #392]	; (800252c <HAL_SPI_Receive+0x280>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e008      	b.n	80023ba <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0149      	lsls	r1, r1, #5
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d107      	bne.n	80023d6 <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4957      	ldr	r1, [pc, #348]	; (8002530 <HAL_SPI_Receive+0x284>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	4013      	ands	r3, r2
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2140      	movs	r1, #64	; 0x40
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	23e0      	movs	r3, #224	; 0xe0
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d900      	bls.n	8002402 <HAL_SPI_Receive+0x156>
 8002400:	e069      	b.n	80024d6 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002402:	e031      	b.n	8002468 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	2b01      	cmp	r3, #1
 8002410:	d117      	bne.n	8002442 <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	001a      	movs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2246      	movs	r2, #70	; 0x46
 8002432:	5a9b      	ldrh	r3, [r3, r2]
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b299      	uxth	r1, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2246      	movs	r2, #70	; 0x46
 800243e:	5299      	strh	r1, [r3, r2]
 8002440:	e012      	b.n	8002468 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002442:	f7fe fdcb 	bl	8000fdc <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d802      	bhi.n	8002458 <HAL_SPI_Receive+0x1ac>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_SPI_Receive+0x1b2>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d104      	bne.n	8002468 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 800245e:	2317      	movs	r3, #23
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2203      	movs	r2, #3
 8002464:	701a      	strb	r2, [r3, #0]
          goto error;
 8002466:	e051      	b.n	800250c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2246      	movs	r2, #70	; 0x46
 800246c:	5a9b      	ldrh	r3, [r3, r2]
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1c7      	bne.n	8002404 <HAL_SPI_Receive+0x158>
 8002474:	e035      	b.n	80024e2 <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	2b01      	cmp	r3, #1
 8002482:	d115      	bne.n	80024b0 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	b292      	uxth	r2, r2
 8002490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	1c9a      	adds	r2, r3, #2
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2246      	movs	r2, #70	; 0x46
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b299      	uxth	r1, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2246      	movs	r2, #70	; 0x46
 80024ac:	5299      	strh	r1, [r3, r2]
 80024ae:	e012      	b.n	80024d6 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b0:	f7fe fd94 	bl	8000fdc <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d802      	bhi.n	80024c6 <HAL_SPI_Receive+0x21a>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_SPI_Receive+0x220>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80024cc:	2317      	movs	r3, #23
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2203      	movs	r2, #3
 80024d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80024d4:	e01a      	b.n	800250c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2246      	movs	r2, #70	; 0x46
 80024da:	5a9b      	ldrh	r3, [r3, r2]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1c9      	bne.n	8002476 <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fb41 	bl	8002b70 <SPI_EndRxTransaction>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8002500:	2317      	movs	r3, #23
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e000      	b.n	800250c <HAL_SPI_Receive+0x260>
  }

error :
 800250a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	225d      	movs	r2, #93	; 0x5d
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	225c      	movs	r2, #92	; 0x5c
 8002518:	2100      	movs	r1, #0
 800251a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800251c:	2317      	movs	r3, #23
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b007      	add	sp, #28
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ffffefff 	.word	0xffffefff
 8002530:	ffffbfff 	.word	0xffffbfff

08002534 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	001a      	movs	r2, r3
 8002542:	1cbb      	adds	r3, r7, #2
 8002544:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002546:	2301      	movs	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800254a:	2323      	movs	r3, #35	; 0x23
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	225c      	movs	r2, #92	; 0x5c
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x2c>
 800255c:	2302      	movs	r3, #2
 800255e:	e21f      	b.n	80029a0 <HAL_SPI_TransmitReceive+0x46c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	225c      	movs	r2, #92	; 0x5c
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002568:	f7fe fd38 	bl	8000fdc <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002570:	201b      	movs	r0, #27
 8002572:	183b      	adds	r3, r7, r0
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	215d      	movs	r1, #93	; 0x5d
 8002578:	5c52      	ldrb	r2, [r2, r1]
 800257a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002582:	2312      	movs	r3, #18
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	1cba      	adds	r2, r7, #2
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 800258c:	2310      	movs	r3, #16
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	1cba      	adds	r2, r7, #2
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002596:	183b      	adds	r3, r7, r0
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d012      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x90>
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	2382      	movs	r3, #130	; 0x82
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d108      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x86>
 80025b0:	231b      	movs	r3, #27
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d004      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 80025ba:	2323      	movs	r3, #35	; 0x23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80025c2:	e1e2      	b.n	800298a <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0xa4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0xa4>
 80025d0:	1cbb      	adds	r3, r7, #2
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80025d8:	2323      	movs	r3, #35	; 0x23
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    goto error;
 80025e0:	e1d3      	b.n	800298a <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	225d      	movs	r2, #93	; 0x5d
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	225d      	movs	r2, #93	; 0x5d
 80025f2:	2105      	movs	r1, #5
 80025f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1cba      	adds	r2, r7, #2
 8002606:	2146      	movs	r1, #70	; 0x46
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1cba      	adds	r2, r7, #2
 8002610:	2144      	movs	r1, #68	; 0x44
 8002612:	8812      	ldrh	r2, [r2, #0]
 8002614:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1cba      	adds	r2, r7, #2
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1cba      	adds	r2, r7, #2
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	23e0      	movs	r3, #224	; 0xe0
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	429a      	cmp	r2, r3
 8002642:	d804      	bhi.n	800264e <HAL_SPI_TransmitReceive+0x11a>
 8002644:	2310      	movs	r3, #16
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d908      	bls.n	8002660 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	49ca      	ldr	r1, [pc, #808]	; (8002984 <HAL_SPI_TransmitReceive+0x450>)
 800265a:	400a      	ands	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	e008      	b.n	8002672 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0149      	lsls	r1, r1, #5
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	4013      	ands	r3, r2
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d007      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	23e0      	movs	r3, #224	; 0xe0
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	429a      	cmp	r2, r3
 800269a:	d800      	bhi.n	800269e <HAL_SPI_TransmitReceive+0x16a>
 800269c:	e07f      	b.n	800279e <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x17e>
 80026a6:	2312      	movs	r3, #18
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d000      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x17e>
 80026b0:	e069      	b.n	8002786 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d6:	e056      	b.n	8002786 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11b      	bne.n	800271e <HAL_SPI_TransmitReceive+0x1ea>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <HAL_SPI_TransmitReceive+0x1ea>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d113      	bne.n	800271e <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	2b01      	cmp	r3, #1
 800272a:	d11c      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x232>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2246      	movs	r2, #70	; 0x46
 8002730:	5a9b      	ldrh	r3, [r3, r2]
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	b292      	uxth	r2, r2
 8002744:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	1c9a      	adds	r2, r3, #2
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2246      	movs	r2, #70	; 0x46
 8002754:	5a9b      	ldrh	r3, [r3, r2]
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b299      	uxth	r1, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2246      	movs	r2, #70	; 0x46
 8002760:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002762:	2301      	movs	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002766:	f7fe fc39 	bl	8000fdc <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	429a      	cmp	r2, r3
 8002774:	d807      	bhi.n	8002786 <HAL_SPI_TransmitReceive+0x252>
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	3301      	adds	r3, #1
 800277a:	d004      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 800277c:	2323      	movs	r3, #35	; 0x23
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2203      	movs	r2, #3
 8002782:	701a      	strb	r2, [r3, #0]
        goto error;
 8002784:	e101      	b.n	800298a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1a3      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x1a4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2246      	movs	r2, #70	; 0x46
 8002794:	5a9b      	ldrh	r3, [r3, r2]
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d19d      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x1a4>
 800279c:	e0e2      	b.n	8002964 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x27e>
 80027a6:	2312      	movs	r3, #18
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d000      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x27e>
 80027b0:	e0cb      	b.n	800294a <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d912      	bls.n	80027e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b02      	subs	r3, #2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e0:	e0b3      	b.n	800294a <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002808:	e09f      	b.n	800294a <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2202      	movs	r2, #2
 8002812:	4013      	ands	r3, r2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d134      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x34e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02f      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x34e>
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	2b01      	cmp	r3, #1
 8002826:	d12c      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d912      	bls.n	8002858 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b02      	subs	r3, #2
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002856:	e012      	b.n	800287e <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	7812      	ldrb	r2, [r2, #0]
 8002864:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d149      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x3f0>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2246      	movs	r2, #70	; 0x46
 8002894:	5a9b      	ldrh	r3, [r3, r2]
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d043      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2246      	movs	r2, #70	; 0x46
 80028a0:	5a9b      	ldrh	r3, [r3, r2]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d924      	bls.n	80028f2 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	b292      	uxth	r2, r2
 80028b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2246      	movs	r2, #70	; 0x46
 80028c4:	5a9b      	ldrh	r3, [r3, r2]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b02      	subs	r3, #2
 80028ca:	b299      	uxth	r1, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2246      	movs	r2, #70	; 0x46
 80028d0:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2246      	movs	r2, #70	; 0x46
 80028d6:	5a9b      	ldrh	r3, [r3, r2]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d820      	bhi.n	8002920 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0149      	lsls	r1, r1, #5
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e016      	b.n	8002920 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	001a      	movs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2246      	movs	r2, #70	; 0x46
 8002912:	5a9b      	ldrh	r3, [r3, r2]
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b299      	uxth	r1, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2246      	movs	r2, #70	; 0x46
 800291e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002924:	f7fe fb5a 	bl	8000fdc <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002930:	429a      	cmp	r2, r3
 8002932:	d802      	bhi.n	800293a <HAL_SPI_TransmitReceive+0x406>
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	3301      	adds	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x40c>
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8002940:	2323      	movs	r3, #35	; 0x23
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2203      	movs	r2, #3
 8002946:	701a      	strb	r2, [r3, #0]
        goto error;
 8002948:	e01f      	b.n	800298a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d000      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x422>
 8002954:	e759      	b.n	800280a <HAL_SPI_TransmitReceive+0x2d6>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2246      	movs	r2, #70	; 0x46
 800295a:	5a9b      	ldrh	r3, [r3, r2]
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d000      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x430>
 8002962:	e752      	b.n	800280a <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f95e 	bl	8002c2c <SPI_EndRxTxTransaction>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d009      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8002974:	2323      	movs	r3, #35	; 0x23
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	661a      	str	r2, [r3, #96]	; 0x60
 8002982:	e002      	b.n	800298a <HAL_SPI_TransmitReceive+0x456>
 8002984:	ffffefff 	.word	0xffffefff
  }

error :
 8002988:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	225d      	movs	r2, #93	; 0x5d
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	225c      	movs	r2, #92	; 0x5c
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800299a:	2323      	movs	r3, #35	; 0x23
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	781b      	ldrb	r3, [r3, #0]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b00a      	add	sp, #40	; 0x28
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b8:	e050      	b.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	d04d      	beq.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029c0:	f7fe fb0c 	bl	8000fdc <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d902      	bls.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d142      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	21e0      	movs	r1, #224	; 0xe0
 80029e2:	438a      	bics	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	2382      	movs	r3, #130	; 0x82
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d113      	bne.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0x72>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d005      	beq.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d107      	bne.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d110      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4914      	ldr	r1, [pc, #80]	; (8002a84 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	0189      	lsls	r1, r1, #6
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	225d      	movs	r2, #93	; 0x5d
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	225c      	movs	r2, #92	; 0x5c
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e00f      	b.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	425a      	negs	r2, r3
 8002a6c:	4153      	adcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	001a      	movs	r2, r3
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d19f      	bne.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	ffffdfff 	.word	0xffffdfff

08002a88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a96:	e05c      	b.n	8002b52 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	23c0      	movs	r3, #192	; 0xc0
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	d04d      	beq.n	8002b52 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fa91 	bl	8000fdc <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d902      	bls.n	8002acc <SPI_WaitFifoStateUntilTimeout+0x44>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d142      	bne.n	8002b52 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	21e0      	movs	r1, #224	; 0xe0
 8002ad8:	438a      	bics	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	2382      	movs	r3, #130	; 0x82
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d113      	bne.n	8002b10 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d005      	beq.n	8002b00 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d110      	bne.n	8002b3e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4911      	ldr	r1, [pc, #68]	; (8002b6c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	0189      	lsls	r1, r1, #6
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	225d      	movs	r2, #93	; 0x5d
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	225c      	movs	r2, #92	; 0x5c
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e008      	b.n	8002b64 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d19a      	bne.n	8002a98 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	ffffdfff 	.word	0xffffdfff

08002b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	2382      	movs	r3, #130	; 0x82
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d113      	bne.n	8002bb0 <SPI_EndRxTransaction+0x40>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2140      	movs	r1, #64	; 0x40
 8002bac:	438a      	bics	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	0013      	movs	r3, r2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	f7ff fef3 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d007      	beq.n	8002bd6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	2220      	movs	r2, #32
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e026      	b.n	8002c24 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	2382      	movs	r3, #130	; 0x82
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d11f      	bne.n	8002c22 <SPI_EndRxTransaction+0xb2>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d005      	beq.n	8002bfa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d113      	bne.n	8002c22 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	23c0      	movs	r3, #192	; 0xc0
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	0013      	movs	r3, r2
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f7ff ff3d 	bl	8002a88 <SPI_WaitFifoStateUntilTimeout>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d007      	beq.n	8002c22 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	2220      	movs	r2, #32
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e000      	b.n	8002c24 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	0159      	lsls	r1, r3, #5
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0013      	movs	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	f7ff ff1e 	bl	8002a88 <SPI_WaitFifoStateUntilTimeout>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d007      	beq.n	8002c60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	2220      	movs	r2, #32
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e027      	b.n	8002cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	0013      	movs	r3, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	f7ff fe9b 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d007      	beq.n	8002c86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e014      	b.n	8002cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	23c0      	movs	r3, #192	; 0xc0
 8002c8a:	00d9      	lsls	r1, r3, #3
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	0013      	movs	r3, r2
 8002c94:	2200      	movs	r2, #0
 8002c96:	f7ff fef7 	bl	8002a88 <SPI_WaitFifoStateUntilTimeout>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d007      	beq.n	8002cae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e000      	b.n	8002cb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b004      	add	sp, #16
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e044      	b.n	8002d54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2270      	movs	r2, #112	; 0x70
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fe f86b 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2224      	movs	r2, #36	; 0x24
 8002ce6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f8d8 	bl	8002eb0 <UART_SetConfig>
 8002d00:	0003      	movs	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e024      	b.n	8002d54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fa51 	bl	80031bc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	490d      	ldr	r1, [pc, #52]	; (8002d5c <HAL_UART_Init+0xa4>)
 8002d26:	400a      	ands	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2108      	movs	r1, #8
 8002d36:	438a      	bics	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fae9 	bl	8003324 <UART_CheckIdleState>
 8002d52:	0003      	movs	r3, r0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	fffff7ff 	.word	0xfffff7ff

08002d60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d000      	beq.n	8002d7a <HAL_UART_Transmit+0x1a>
 8002d78:	e095      	b.n	8002ea6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_UART_Transmit+0x28>
 8002d80:	1dbb      	adds	r3, r7, #6
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e08d      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d109      	bne.n	8002dac <HAL_UART_Transmit+0x4c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d001      	beq.n	8002dac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e07d      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2270      	movs	r2, #112	; 0x70
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Transmit+0x5a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e076      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2270      	movs	r2, #112	; 0x70
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002dce:	f7fe f905 	bl	8000fdc <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1dba      	adds	r2, r7, #6
 8002dda:	2150      	movs	r1, #80	; 0x50
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1dba      	adds	r2, r7, #6
 8002de4:	2152      	movs	r1, #82	; 0x52
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	015b      	lsls	r3, r3, #5
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d108      	bne.n	8002e08 <HAL_UART_Transmit+0xa8>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e003      	b.n	8002e10 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e10:	e02d      	b.n	8002e6e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	f000 fac6 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	05d2      	lsls	r2, r2, #23
 8002e3c:	0dd2      	lsrs	r2, r2, #23
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e008      	b.n	8002e5c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b292      	uxth	r2, r2
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2252      	movs	r2, #82	; 0x52
 8002e60:	5a9b      	ldrh	r3, [r3, r2]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b299      	uxth	r1, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2252      	movs	r2, #82	; 0x52
 8002e6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2252      	movs	r2, #82	; 0x52
 8002e72:	5a9b      	ldrh	r3, [r3, r2]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1cb      	bne.n	8002e12 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	0013      	movs	r3, r2
 8002e84:	2200      	movs	r2, #0
 8002e86:	2140      	movs	r1, #64	; 0x40
 8002e88:	f000 fa92 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e009      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2270      	movs	r2, #112	; 0x70
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b008      	add	sp, #32
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ebc:	2317      	movs	r3, #23
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4aad      	ldr	r2, [pc, #692]	; (8003198 <UART_SetConfig+0x2e8>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4aa8      	ldr	r2, [pc, #672]	; (800319c <UART_SetConfig+0x2ec>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a9f      	ldr	r2, [pc, #636]	; (80031a0 <UART_SetConfig+0x2f0>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9b      	ldr	r2, [pc, #620]	; (80031a4 <UART_SetConfig+0x2f4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d125      	bne.n	8002f86 <UART_SetConfig+0xd6>
 8002f3a:	4b9b      	ldr	r3, [pc, #620]	; (80031a8 <UART_SetConfig+0x2f8>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d00f      	beq.n	8002f66 <UART_SetConfig+0xb6>
 8002f46:	d304      	bcc.n	8002f52 <UART_SetConfig+0xa2>
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d011      	beq.n	8002f70 <UART_SetConfig+0xc0>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d005      	beq.n	8002f5c <UART_SetConfig+0xac>
 8002f50:	e013      	b.n	8002f7a <UART_SetConfig+0xca>
 8002f52:	231f      	movs	r3, #31
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e022      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f5c:	231f      	movs	r3, #31
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e01d      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f66:	231f      	movs	r3, #31
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e018      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f70:	231f      	movs	r3, #31
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	2208      	movs	r2, #8
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e013      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f7a:	231f      	movs	r3, #31
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2210      	movs	r2, #16
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a88      	ldr	r2, [pc, #544]	; (80031ac <UART_SetConfig+0x2fc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d104      	bne.n	8002f9a <UART_SetConfig+0xea>
 8002f90:	231f      	movs	r3, #31
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e003      	b.n	8002fa2 <UART_SetConfig+0xf2>
 8002f9a:	231f      	movs	r3, #31
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d000      	beq.n	8002fb0 <UART_SetConfig+0x100>
 8002fae:	e07d      	b.n	80030ac <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002fb0:	231f      	movs	r3, #31
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d01c      	beq.n	8002ff4 <UART_SetConfig+0x144>
 8002fba:	dc02      	bgt.n	8002fc2 <UART_SetConfig+0x112>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <UART_SetConfig+0x11c>
 8002fc0:	e04b      	b.n	800305a <UART_SetConfig+0x1aa>
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d025      	beq.n	8003012 <UART_SetConfig+0x162>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d037      	beq.n	800303a <UART_SetConfig+0x18a>
 8002fca:	e046      	b.n	800305a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7fe ff3c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	005a      	lsls	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	18d2      	adds	r2, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	f7fd f88e 	bl	8000108 <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
        break;
 8002ff2:	e037      	b.n	8003064 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <UART_SetConfig+0x300>)
 8002ffc:	189a      	adds	r2, r3, r2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0019      	movs	r1, r3
 8003004:	0010      	movs	r0, r2
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	b29b      	uxth	r3, r3
 800300e:	61bb      	str	r3, [r7, #24]
        break;
 8003010:	e028      	b.n	8003064 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003012:	f7fe fea9 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8003016:	0003      	movs	r3, r0
 8003018:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f7fd f86b 	bl	8000108 <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	b29b      	uxth	r3, r3
 8003036:	61bb      	str	r3, [r7, #24]
        break;
 8003038:	e014      	b.n	8003064 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0252      	lsls	r2, r2, #9
 8003044:	189a      	adds	r2, r3, r2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0019      	movs	r1, r3
 800304c:	0010      	movs	r0, r2
 800304e:	f7fd f85b 	bl	8000108 <__udivsi3>
 8003052:	0003      	movs	r3, r0
 8003054:	b29b      	uxth	r3, r3
 8003056:	61bb      	str	r3, [r7, #24]
        break;
 8003058:	e004      	b.n	8003064 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800305a:	2317      	movs	r3, #23
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
        break;
 8003062:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	d91b      	bls.n	80030a2 <UART_SetConfig+0x1f2>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <UART_SetConfig+0x304>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d817      	bhi.n	80030a2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	b29a      	uxth	r2, r3
 8003076:	200a      	movs	r0, #10
 8003078:	183b      	adds	r3, r7, r0
 800307a:	210f      	movs	r1, #15
 800307c:	438a      	bics	r2, r1
 800307e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	b29b      	uxth	r3, r3
 8003086:	2207      	movs	r2, #7
 8003088:	4013      	ands	r3, r2
 800308a:	b299      	uxth	r1, r3
 800308c:	183b      	adds	r3, r7, r0
 800308e:	183a      	adds	r2, r7, r0
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	183a      	adds	r2, r7, r0
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	e06c      	b.n	800317c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80030a2:	2317      	movs	r3, #23
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e067      	b.n	800317c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80030ac:	231f      	movs	r3, #31
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d01b      	beq.n	80030ee <UART_SetConfig+0x23e>
 80030b6:	dc02      	bgt.n	80030be <UART_SetConfig+0x20e>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0x218>
 80030bc:	e049      	b.n	8003152 <UART_SetConfig+0x2a2>
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d024      	beq.n	800310c <UART_SetConfig+0x25c>
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d035      	beq.n	8003132 <UART_SetConfig+0x282>
 80030c6:	e044      	b.n	8003152 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c8:	f7fe febe 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	085a      	lsrs	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	18d2      	adds	r2, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	0019      	movs	r1, r3
 80030e0:	0010      	movs	r0, r2
 80030e2:	f7fd f811 	bl	8000108 <__udivsi3>
 80030e6:	0003      	movs	r3, r0
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e036      	b.n	800315c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <UART_SetConfig+0x308>)
 80030f6:	189a      	adds	r2, r3, r2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0019      	movs	r1, r3
 80030fe:	0010      	movs	r0, r2
 8003100:	f7fd f802 	bl	8000108 <__udivsi3>
 8003104:	0003      	movs	r3, r0
 8003106:	b29b      	uxth	r3, r3
 8003108:	61bb      	str	r3, [r7, #24]
        break;
 800310a:	e027      	b.n	800315c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310c:	f7fe fe2c 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8003110:	0003      	movs	r3, r0
 8003112:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085a      	lsrs	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f7fc ffef 	bl	8000108 <__udivsi3>
 800312a:	0003      	movs	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	61bb      	str	r3, [r7, #24]
        break;
 8003130:	e014      	b.n	800315c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0212      	lsls	r2, r2, #8
 800313c:	189a      	adds	r2, r3, r2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	0019      	movs	r1, r3
 8003144:	0010      	movs	r0, r2
 8003146:	f7fc ffdf 	bl	8000108 <__udivsi3>
 800314a:	0003      	movs	r3, r0
 800314c:	b29b      	uxth	r3, r3
 800314e:	61bb      	str	r3, [r7, #24]
        break;
 8003150:	e004      	b.n	800315c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003152:	2317      	movs	r3, #23
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
        break;
 800315a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d908      	bls.n	8003174 <UART_SetConfig+0x2c4>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <UART_SetConfig+0x304>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d804      	bhi.n	8003174 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	e003      	b.n	800317c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003174:	2317      	movs	r3, #23
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003188:	2317      	movs	r3, #23
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	781b      	ldrb	r3, [r3, #0]
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b008      	add	sp, #32
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	ffffcfff 	.word	0xffffcfff
 80031a0:	fffff4ff 	.word	0xfffff4ff
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40004400 	.word	0x40004400
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	0000ffff 	.word	0x0000ffff
 80031b8:	007a1200 	.word	0x007a1200

080031bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <UART_AdvFeatureConfig+0x144>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00b      	beq.n	8003208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a43      	ldr	r2, [pc, #268]	; (8003304 <UART_AdvFeatureConfig+0x148>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2204      	movs	r2, #4
 800320e:	4013      	ands	r3, r2
 8003210:	d00b      	beq.n	800322a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <UART_AdvFeatureConfig+0x14c>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2208      	movs	r2, #8
 8003230:	4013      	ands	r3, r2
 8003232:	d00b      	beq.n	800324c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a34      	ldr	r2, [pc, #208]	; (800330c <UART_AdvFeatureConfig+0x150>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2210      	movs	r2, #16
 8003252:	4013      	ands	r3, r2
 8003254:	d00b      	beq.n	800326e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <UART_AdvFeatureConfig+0x154>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2220      	movs	r2, #32
 8003274:	4013      	ands	r3, r2
 8003276:	d00b      	beq.n	8003290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <UART_AdvFeatureConfig+0x158>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	4013      	ands	r3, r2
 8003298:	d01d      	beq.n	80032d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <UART_AdvFeatureConfig+0x15c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	035b      	lsls	r3, r3, #13
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d10b      	bne.n	80032d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a15      	ldr	r2, [pc, #84]	; (800331c <UART_AdvFeatureConfig+0x160>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	4013      	ands	r3, r2
 80032de:	d00b      	beq.n	80032f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <UART_AdvFeatureConfig+0x164>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	0019      	movs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	fffdffff 	.word	0xfffdffff
 8003304:	fffeffff 	.word	0xfffeffff
 8003308:	fffbffff 	.word	0xfffbffff
 800330c:	ffff7fff 	.word	0xffff7fff
 8003310:	ffffefff 	.word	0xffffefff
 8003314:	ffffdfff 	.word	0xffffdfff
 8003318:	ffefffff 	.word	0xffefffff
 800331c:	ff9fffff 	.word	0xff9fffff
 8003320:	fff7ffff 	.word	0xfff7ffff

08003324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003332:	f7fd fe53 	bl	8000fdc <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	4013      	ands	r3, r2
 8003344:	2b08      	cmp	r3, #8
 8003346:	d10d      	bne.n	8003364 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	0399      	lsls	r1, r3, #14
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <UART_CheckIdleState+0x88>)
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	0013      	movs	r3, r2
 8003356:	2200      	movs	r2, #0
 8003358:	f000 f82a 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e01f      	b.n	80033a4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2204      	movs	r2, #4
 800336c:	4013      	ands	r3, r2
 800336e:	2b04      	cmp	r3, #4
 8003370:	d10d      	bne.n	800338e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	03d9      	lsls	r1, r3, #15
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <UART_CheckIdleState+0x88>)
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	0013      	movs	r3, r2
 8003380:	2200      	movs	r2, #0
 8003382:	f000 f815 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e00a      	b.n	80033a4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2270      	movs	r2, #112	; 0x70
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b004      	add	sp, #16
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	01ffffff 	.word	0x01ffffff

080033b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	e05d      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	3301      	adds	r3, #1
 80033c6:	d05a      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fd fe08 	bl	8000fdc <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <UART_WaitOnFlagUntilTimeout+0x2e>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11b      	bne.n	8003416 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	492f      	ldr	r1, [pc, #188]	; (80034a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	438a      	bics	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2270      	movs	r2, #112	; 0x70
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e043      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2204      	movs	r2, #4
 800341e:	4013      	ands	r3, r2
 8003420:	d02d      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	401a      	ands	r2, r3
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	429a      	cmp	r2, r3
 8003434:	d123      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4917      	ldr	r1, [pc, #92]	; (80034a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2101      	movs	r1, #1
 800345c:	438a      	bics	r2, r1
 800345e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2270      	movs	r2, #112	; 0x70
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	425a      	negs	r2, r3
 800348e:	4153      	adcs	r3, r2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	001a      	movs	r2, r3
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d092      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	fffffe5f 	.word	0xfffffe5f

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2600      	movs	r6, #0
 80034b0:	4d0c      	ldr	r5, [pc, #48]	; (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	; (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a6      	cmp	r6, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	2600      	movs	r6, #0
 80034be:	f000 f82b 	bl	8003518 <_init>
 80034c2:	4d0a      	ldr	r5, [pc, #40]	; (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <__libc_init_array+0x44>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a6      	cmp	r6, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	00b3      	lsls	r3, r6, #2
 80034d2:	58eb      	ldr	r3, [r5, r3]
 80034d4:	4798      	blx	r3
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	00b3      	lsls	r3, r6, #2
 80034dc:	58eb      	ldr	r3, [r5, r3]
 80034de:	4798      	blx	r3
 80034e0:	3601      	adds	r6, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	08003724 	.word	0x08003724
 80034e8:	08003724 	.word	0x08003724
 80034ec:	08003724 	.word	0x08003724
 80034f0:	08003728 	.word	0x08003728

080034f4 <memcpy>:
 80034f4:	2300      	movs	r3, #0
 80034f6:	b510      	push	{r4, lr}
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d100      	bne.n	80034fe <memcpy+0xa>
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	5ccc      	ldrb	r4, [r1, r3]
 8003500:	54c4      	strb	r4, [r0, r3]
 8003502:	3301      	adds	r3, #1
 8003504:	e7f8      	b.n	80034f8 <memcpy+0x4>

08003506 <memset>:
 8003506:	0003      	movs	r3, r0
 8003508:	1812      	adds	r2, r2, r0
 800350a:	4293      	cmp	r3, r2
 800350c:	d100      	bne.n	8003510 <memset+0xa>
 800350e:	4770      	bx	lr
 8003510:	7019      	strb	r1, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	e7f9      	b.n	800350a <memset+0x4>
	...

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
